// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_features_squash_Pipeline_VITIS_LOOP_296_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_buffer_3_address0,
        output_buffer_3_ce0,
        output_buffer_3_we0,
        output_buffer_3_d0,
        output_buffer_3_address1,
        output_buffer_3_ce1,
        output_buffer_3_we1,
        output_buffer_3_d1,
        output_buffer_2_address0,
        output_buffer_2_ce0,
        output_buffer_2_we0,
        output_buffer_2_d0,
        output_buffer_2_address1,
        output_buffer_2_ce1,
        output_buffer_2_we1,
        output_buffer_2_d1,
        output_buffer_1_address0,
        output_buffer_1_ce0,
        output_buffer_1_we0,
        output_buffer_1_d0,
        output_buffer_1_address1,
        output_buffer_1_ce1,
        output_buffer_1_we1,
        output_buffer_1_d1,
        output_buffer_address0,
        output_buffer_ce0,
        output_buffer_we0,
        output_buffer_d0,
        output_buffer_address1,
        output_buffer_ce1,
        output_buffer_we1,
        output_buffer_d1,
        scale_address0,
        scale_ce0,
        scale_q0,
        input_buffer_address0,
        input_buffer_ce0,
        input_buffer_q0,
        input_buffer_address1,
        input_buffer_ce1,
        input_buffer_q1,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_q0,
        input_buffer_1_address1,
        input_buffer_1_ce1,
        input_buffer_1_q1,
        input_buffer_2_address0,
        input_buffer_2_ce0,
        input_buffer_2_q0,
        input_buffer_2_address1,
        input_buffer_2_ce1,
        input_buffer_2_q1,
        input_buffer_3_address0,
        input_buffer_3_ce0,
        input_buffer_3_q0,
        input_buffer_3_address1,
        input_buffer_3_ce1,
        input_buffer_3_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] output_buffer_3_address0;
output   output_buffer_3_ce0;
output   output_buffer_3_we0;
output  [31:0] output_buffer_3_d0;
output  [11:0] output_buffer_3_address1;
output   output_buffer_3_ce1;
output   output_buffer_3_we1;
output  [31:0] output_buffer_3_d1;
output  [11:0] output_buffer_2_address0;
output   output_buffer_2_ce0;
output   output_buffer_2_we0;
output  [31:0] output_buffer_2_d0;
output  [11:0] output_buffer_2_address1;
output   output_buffer_2_ce1;
output   output_buffer_2_we1;
output  [31:0] output_buffer_2_d1;
output  [11:0] output_buffer_1_address0;
output   output_buffer_1_ce0;
output   output_buffer_1_we0;
output  [31:0] output_buffer_1_d0;
output  [11:0] output_buffer_1_address1;
output   output_buffer_1_ce1;
output   output_buffer_1_we1;
output  [31:0] output_buffer_1_d1;
output  [11:0] output_buffer_address0;
output   output_buffer_ce0;
output   output_buffer_we0;
output  [31:0] output_buffer_d0;
output  [11:0] output_buffer_address1;
output   output_buffer_ce1;
output   output_buffer_we1;
output  [31:0] output_buffer_d1;
output  [10:0] scale_address0;
output   scale_ce0;
input  [31:0] scale_q0;
output  [11:0] input_buffer_address0;
output   input_buffer_ce0;
input  [31:0] input_buffer_q0;
output  [11:0] input_buffer_address1;
output   input_buffer_ce1;
input  [31:0] input_buffer_q1;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
input  [31:0] input_buffer_1_q0;
output  [11:0] input_buffer_1_address1;
output   input_buffer_1_ce1;
input  [31:0] input_buffer_1_q1;
output  [11:0] input_buffer_2_address0;
output   input_buffer_2_ce0;
input  [31:0] input_buffer_2_q0;
output  [11:0] input_buffer_2_address1;
output   input_buffer_2_ce1;
input  [31:0] input_buffer_2_q1;
output  [11:0] input_buffer_3_address0;
output   input_buffer_3_ce0;
input  [31:0] input_buffer_3_q0;
output  [11:0] input_buffer_3_address1;
output   input_buffer_3_ce1;
input  [31:0] input_buffer_3_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln296_fu_313_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] p_cast28_fu_338_p1;
reg   [63:0] p_cast28_reg_517;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln300_fu_354_p1;
reg   [63:0] zext_ln300_reg_550;
wire   [63:0] zext_ln296_fu_325_p1;
wire    ap_block_pp0_stage0;
reg   [10:0] grid_rows_fu_56;
wire   [10:0] add_ln296_fu_319_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_grid_rows_1;
reg    scale_ce0_local;
reg    input_buffer_ce1_local;
reg    input_buffer_ce0_local;
reg    input_buffer_1_ce1_local;
reg    input_buffer_1_ce0_local;
reg    input_buffer_2_ce1_local;
reg    input_buffer_2_ce0_local;
reg    input_buffer_3_ce1_local;
reg    input_buffer_3_ce0_local;
reg    output_buffer_we1_local;
reg    output_buffer_ce1_local;
reg    output_buffer_we0_local;
reg    output_buffer_ce0_local;
reg    output_buffer_1_we1_local;
reg    output_buffer_1_ce1_local;
reg    output_buffer_1_we0_local;
reg    output_buffer_1_ce0_local;
reg    output_buffer_2_we1_local;
reg    output_buffer_2_ce1_local;
reg    output_buffer_2_we0_local;
reg    output_buffer_2_ce0_local;
reg    output_buffer_3_we1_local;
reg    output_buffer_3_ce1_local;
reg    output_buffer_3_we0_local;
reg    output_buffer_3_ce0_local;
wire  signed [31:0] mul_ln300_fu_273_p1;
wire  signed [47:0] sext_ln300_fu_367_p1;
wire  signed [31:0] mul_ln300_1_fu_277_p1;
wire  signed [31:0] mul_ln300_2_fu_281_p1;
wire  signed [31:0] mul_ln300_3_fu_285_p1;
wire  signed [31:0] mul_ln300_4_fu_289_p1;
wire  signed [31:0] mul_ln300_5_fu_293_p1;
wire  signed [31:0] mul_ln300_6_fu_297_p1;
wire  signed [31:0] mul_ln300_7_fu_301_p1;
wire   [11:0] tmp_s_fu_330_p3;
wire   [11:0] or_ln3_fu_346_p3;
wire   [47:0] mul_ln300_fu_273_p2;
wire   [47:0] mul_ln300_1_fu_277_p2;
wire   [47:0] mul_ln300_2_fu_281_p2;
wire   [47:0] mul_ln300_3_fu_285_p2;
wire   [47:0] mul_ln300_4_fu_289_p2;
wire   [47:0] mul_ln300_5_fu_293_p2;
wire   [47:0] mul_ln300_6_fu_297_p2;
wire   [47:0] mul_ln300_7_fu_301_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grid_rows_fu_56 = 11'd0;
#0 ap_done_reg = 1'b0;
end

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U673(
    .din0(input_buffer_q1),
    .din1(mul_ln300_fu_273_p1),
    .dout(mul_ln300_fu_273_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U674(
    .din0(input_buffer_1_q1),
    .din1(mul_ln300_1_fu_277_p1),
    .dout(mul_ln300_1_fu_277_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U675(
    .din0(input_buffer_2_q1),
    .din1(mul_ln300_2_fu_281_p1),
    .dout(mul_ln300_2_fu_281_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U676(
    .din0(input_buffer_3_q1),
    .din1(mul_ln300_3_fu_285_p1),
    .dout(mul_ln300_3_fu_285_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U677(
    .din0(input_buffer_q0),
    .din1(mul_ln300_4_fu_289_p1),
    .dout(mul_ln300_4_fu_289_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U678(
    .din0(input_buffer_1_q0),
    .din1(mul_ln300_5_fu_293_p1),
    .dout(mul_ln300_5_fu_293_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U679(
    .din0(input_buffer_2_q0),
    .din1(mul_ln300_6_fu_297_p1),
    .dout(mul_ln300_6_fu_297_p2)
);

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U680(
    .din0(input_buffer_3_q0),
    .din1(mul_ln300_7_fu_301_p1),
    .dout(mul_ln300_7_fu_301_p2)
);

process_features_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln296_fu_313_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grid_rows_fu_56 <= add_ln296_fu_319_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            grid_rows_fu_56 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_cast28_reg_517[11 : 1] <= p_cast28_fu_338_p1[11 : 1];
        zext_ln300_reg_550[11 : 1] <= zext_ln300_fu_354_p1[11 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln296_fu_313_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_grid_rows_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_grid_rows_1 = grid_rows_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_ce0_local = 1'b1;
    end else begin
        input_buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_ce1_local = 1'b1;
    end else begin
        input_buffer_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_2_ce0_local = 1'b1;
    end else begin
        input_buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_2_ce1_local = 1'b1;
    end else begin
        input_buffer_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_3_ce0_local = 1'b1;
    end else begin
        input_buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_3_ce1_local = 1'b1;
    end else begin
        input_buffer_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_ce0_local = 1'b1;
    end else begin
        input_buffer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_ce1_local = 1'b1;
    end else begin
        input_buffer_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_1_ce0_local = 1'b1;
    end else begin
        output_buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_1_ce1_local = 1'b1;
    end else begin
        output_buffer_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_1_we0_local = 1'b1;
    end else begin
        output_buffer_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_1_we1_local = 1'b1;
    end else begin
        output_buffer_1_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_2_ce0_local = 1'b1;
    end else begin
        output_buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_2_ce1_local = 1'b1;
    end else begin
        output_buffer_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_2_we0_local = 1'b1;
    end else begin
        output_buffer_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_2_we1_local = 1'b1;
    end else begin
        output_buffer_2_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_3_ce0_local = 1'b1;
    end else begin
        output_buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_3_ce1_local = 1'b1;
    end else begin
        output_buffer_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_3_we0_local = 1'b1;
    end else begin
        output_buffer_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_3_we1_local = 1'b1;
    end else begin
        output_buffer_3_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_ce0_local = 1'b1;
    end else begin
        output_buffer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_ce1_local = 1'b1;
    end else begin
        output_buffer_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_we0_local = 1'b1;
    end else begin
        output_buffer_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_we1_local = 1'b1;
    end else begin
        output_buffer_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        scale_ce0_local = 1'b1;
    end else begin
        scale_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln296_fu_319_p2 = (ap_sig_allocacmp_grid_rows_1 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln296_fu_313_p2 = ((ap_sig_allocacmp_grid_rows_1 == 11'd1152) ? 1'b1 : 1'b0);

assign input_buffer_1_address0 = zext_ln300_fu_354_p1;

assign input_buffer_1_address1 = p_cast28_fu_338_p1;

assign input_buffer_1_ce0 = input_buffer_1_ce0_local;

assign input_buffer_1_ce1 = input_buffer_1_ce1_local;

assign input_buffer_2_address0 = zext_ln300_fu_354_p1;

assign input_buffer_2_address1 = p_cast28_fu_338_p1;

assign input_buffer_2_ce0 = input_buffer_2_ce0_local;

assign input_buffer_2_ce1 = input_buffer_2_ce1_local;

assign input_buffer_3_address0 = zext_ln300_fu_354_p1;

assign input_buffer_3_address1 = p_cast28_fu_338_p1;

assign input_buffer_3_ce0 = input_buffer_3_ce0_local;

assign input_buffer_3_ce1 = input_buffer_3_ce1_local;

assign input_buffer_address0 = zext_ln300_fu_354_p1;

assign input_buffer_address1 = p_cast28_fu_338_p1;

assign input_buffer_ce0 = input_buffer_ce0_local;

assign input_buffer_ce1 = input_buffer_ce1_local;

assign mul_ln300_1_fu_277_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_2_fu_281_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_3_fu_285_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_4_fu_289_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_5_fu_293_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_6_fu_297_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_7_fu_301_p1 = sext_ln300_fu_367_p1;

assign mul_ln300_fu_273_p1 = sext_ln300_fu_367_p1;

assign or_ln3_fu_346_p3 = {{ap_sig_allocacmp_grid_rows_1}, {1'd1}};

assign output_buffer_1_address0 = zext_ln300_reg_550;

assign output_buffer_1_address1 = p_cast28_reg_517;

assign output_buffer_1_ce0 = output_buffer_1_ce0_local;

assign output_buffer_1_ce1 = output_buffer_1_ce1_local;

assign output_buffer_1_d0 = {{mul_ln300_5_fu_293_p2[47:16]}};

assign output_buffer_1_d1 = {{mul_ln300_1_fu_277_p2[47:16]}};

assign output_buffer_1_we0 = output_buffer_1_we0_local;

assign output_buffer_1_we1 = output_buffer_1_we1_local;

assign output_buffer_2_address0 = zext_ln300_reg_550;

assign output_buffer_2_address1 = p_cast28_reg_517;

assign output_buffer_2_ce0 = output_buffer_2_ce0_local;

assign output_buffer_2_ce1 = output_buffer_2_ce1_local;

assign output_buffer_2_d0 = {{mul_ln300_6_fu_297_p2[47:16]}};

assign output_buffer_2_d1 = {{mul_ln300_2_fu_281_p2[47:16]}};

assign output_buffer_2_we0 = output_buffer_2_we0_local;

assign output_buffer_2_we1 = output_buffer_2_we1_local;

assign output_buffer_3_address0 = zext_ln300_reg_550;

assign output_buffer_3_address1 = p_cast28_reg_517;

assign output_buffer_3_ce0 = output_buffer_3_ce0_local;

assign output_buffer_3_ce1 = output_buffer_3_ce1_local;

assign output_buffer_3_d0 = {{mul_ln300_7_fu_301_p2[47:16]}};

assign output_buffer_3_d1 = {{mul_ln300_3_fu_285_p2[47:16]}};

assign output_buffer_3_we0 = output_buffer_3_we0_local;

assign output_buffer_3_we1 = output_buffer_3_we1_local;

assign output_buffer_address0 = zext_ln300_reg_550;

assign output_buffer_address1 = p_cast28_reg_517;

assign output_buffer_ce0 = output_buffer_ce0_local;

assign output_buffer_ce1 = output_buffer_ce1_local;

assign output_buffer_d0 = {{mul_ln300_4_fu_289_p2[47:16]}};

assign output_buffer_d1 = {{mul_ln300_fu_273_p2[47:16]}};

assign output_buffer_we0 = output_buffer_we0_local;

assign output_buffer_we1 = output_buffer_we1_local;

assign p_cast28_fu_338_p1 = tmp_s_fu_330_p3;

assign scale_address0 = zext_ln296_fu_325_p1;

assign scale_ce0 = scale_ce0_local;

assign sext_ln300_fu_367_p1 = $signed(scale_q0);

assign tmp_s_fu_330_p3 = {{ap_sig_allocacmp_grid_rows_1}, {1'd0}};

assign zext_ln296_fu_325_p1 = ap_sig_allocacmp_grid_rows_1;

assign zext_ln300_fu_354_p1 = or_ln3_fu_346_p3;

always @ (posedge ap_clk) begin
    p_cast28_reg_517[0] <= 1'b0;
    p_cast28_reg_517[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln300_reg_550[0] <= 1'b1;
    zext_ln300_reg_550[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //process_features_squash_Pipeline_VITIS_LOOP_296_5
