// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_features_process_features_Pipeline_VITIS_LOOP_234_1_VITIS_LOOP_236_2_VITIS_LOOP_238_3_VIT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feature_collection_address0,
        feature_collection_ce0,
        feature_collection_q0,
        output_buffer_address0,
        output_buffer_ce0,
        output_buffer_we0,
        output_buffer_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] feature_collection_address0;
output   feature_collection_ce0;
input  [31:0] feature_collection_q0;
output  [13:0] output_buffer_address0;
output   output_buffer_ce0;
output   output_buffer_we0;
output  [31:0] output_buffer_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln234_fu_178_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln242_fu_433_p1;
reg   [2:0] trunc_ln242_reg_613;
wire   [0:0] icmp_ln243_fu_437_p2;
reg   [0:0] icmp_ln243_reg_618;
wire   [63:0] zext_ln242_2_fu_428_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln242_fu_526_p1;
reg   [31:0] out_vector_1_fu_76;
wire   [31:0] out_vector_fu_537_p3;
wire    ap_loop_init;
reg   [3:0] current_dim_fu_80;
wire   [3:0] add_ln240_fu_443_p2;
reg   [8:0] current_kernel_fu_84;
wire   [8:0] select_ln238_fu_338_p3;
reg   [9:0] indvar_flatten_fu_88;
wire   [9:0] select_ln238_1_fu_455_p3;
reg   [2:0] grid_cols_fu_92;
wire   [2:0] select_ln236_fu_304_p3;
reg   [11:0] indvar_flatten14_fu_96;
wire   [11:0] select_ln236_1_fu_469_p3;
reg   [2:0] grid_rows_fu_100;
wire   [2:0] select_ln234_1_fu_252_p3;
reg   [13:0] indvar_flatten40_fu_104;
wire   [13:0] add_ln234_fu_184_p2;
reg    feature_collection_ce0_local;
reg    output_buffer_we0_local;
reg    output_buffer_ce0_local;
wire   [0:0] icmp_ln236_fu_208_p2;
wire   [0:0] icmp_ln238_fu_234_p2;
wire   [0:0] xor_ln234_fu_222_p2;
wire   [2:0] add_ln234_1_fu_246_p2;
wire   [2:0] select_ln234_fu_214_p3;
wire   [0:0] and_ln234_1_fu_240_p2;
wire   [0:0] empty_fu_266_p2;
wire   [0:0] exitcond_flatten_not_fu_280_p2;
wire   [0:0] not_exitcond_flatten_mid239_fu_286_p2;
wire   [0:0] and_ln234_fu_292_p2;
wire   [0:0] icmp_ln240_fu_228_p2;
wire   [2:0] add_ln236_fu_260_p2;
wire   [8:0] current_kernel_mid26_fu_272_p3;
wire   [0:0] icmp_ln240_mid213_fu_298_p2;
wire   [0:0] empty_68_fu_318_p2;
wire   [0:0] empty_69_fu_324_p2;
wire   [8:0] add_ln238_fu_312_p2;
wire   [3:0] tmp_fu_354_p3;
wire   [5:0] p_shl6_fu_346_p3;
wire   [5:0] p_shl7_fu_362_p1;
wire   [5:0] empty_70_fu_366_p2;
wire   [3:0] current_dim_mid2_fu_330_p3;
wire   [8:0] zext_ln240_fu_380_p1;
wire   [8:0] add_ln242_fu_384_p2;
wire   [10:0] tmp_14_fu_398_p3;
wire   [13:0] p_shl_fu_390_p3;
wire   [13:0] zext_ln242_1_fu_406_p1;
wire   [13:0] zext_ln236_fu_372_p1;
wire   [13:0] add_ln242_4_fu_410_p2;
wire   [13:0] add_ln242_3_fu_416_p2;
wire   [13:0] zext_ln236_1_fu_376_p1;
wire   [13:0] add_ln242_1_fu_422_p2;
wire   [9:0] add_ln238_1_fu_449_p2;
wire   [11:0] add_ln236_1_fu_463_p2;
wire   [10:0] trunc_ln240_fu_515_p1;
wire   [13:0] add_ln242_2_fu_519_p3;
wire   [31:0] add_ln244_fu_531_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 out_vector_1_fu_76 = 32'd0;
#0 current_dim_fu_80 = 4'd0;
#0 current_kernel_fu_84 = 9'd0;
#0 indvar_flatten_fu_88 = 10'd0;
#0 grid_cols_fu_92 = 3'd0;
#0 indvar_flatten14_fu_96 = 12'd0;
#0 grid_rows_fu_100 = 3'd0;
#0 indvar_flatten40_fu_104 = 14'd0;
#0 ap_done_reg = 1'b0;
end

process_features_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            current_dim_fu_80 <= 4'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            current_dim_fu_80 <= add_ln240_fu_443_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            current_kernel_fu_84 <= 9'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            current_kernel_fu_84 <= select_ln238_fu_338_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            grid_cols_fu_92 <= 3'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            grid_cols_fu_92 <= select_ln236_fu_304_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            grid_rows_fu_100 <= 3'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            grid_rows_fu_100 <= select_ln234_1_fu_252_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten14_fu_96 <= 12'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten14_fu_96 <= select_ln236_1_fu_469_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten40_fu_104 <= 14'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten40_fu_104 <= add_ln234_fu_184_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 10'd0;
        end else if (((icmp_ln234_fu_178_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_88 <= select_ln238_1_fu_455_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_vector_1_fu_76 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            out_vector_1_fu_76 <= out_vector_fu_537_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln243_reg_618 <= icmp_ln243_fu_437_p2;
        trunc_ln242_reg_613 <= trunc_ln242_fu_433_p1;
    end
end

always @ (*) begin
    if (((icmp_ln234_fu_178_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        feature_collection_ce0_local = 1'b1;
    end else begin
        feature_collection_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_buffer_ce0_local = 1'b1;
    end else begin
        output_buffer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_buffer_we0_local = 1'b1;
    end else begin
        output_buffer_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln234_1_fu_246_p2 = (grid_rows_fu_100 + 3'd1);

assign add_ln234_fu_184_p2 = (indvar_flatten40_fu_104 + 14'd1);

assign add_ln236_1_fu_463_p2 = (indvar_flatten14_fu_96 + 12'd1);

assign add_ln236_fu_260_p2 = (select_ln234_fu_214_p3 + 3'd1);

assign add_ln238_1_fu_449_p2 = (indvar_flatten_fu_88 + 10'd1);

assign add_ln238_fu_312_p2 = (current_kernel_mid26_fu_272_p3 + 9'd8);

assign add_ln240_fu_443_p2 = (current_dim_mid2_fu_330_p3 + 4'd1);

assign add_ln242_1_fu_422_p2 = (add_ln242_3_fu_416_p2 + zext_ln236_1_fu_376_p1);

assign add_ln242_2_fu_519_p3 = {{trunc_ln240_fu_515_p1}, {trunc_ln242_reg_613}};

assign add_ln242_3_fu_416_p2 = (zext_ln236_fu_372_p1 + add_ln242_4_fu_410_p2);

assign add_ln242_4_fu_410_p2 = (p_shl_fu_390_p3 + zext_ln242_1_fu_406_p1);

assign add_ln242_fu_384_p2 = (zext_ln240_fu_380_p1 + select_ln238_fu_338_p3);

assign add_ln244_fu_531_p2 = (out_vector_1_fu_76 + 32'd1);

assign and_ln234_1_fu_240_p2 = (xor_ln234_fu_222_p2 & icmp_ln238_fu_234_p2);

assign and_ln234_fu_292_p2 = (xor_ln234_fu_222_p2 & not_exitcond_flatten_mid239_fu_286_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign current_dim_mid2_fu_330_p3 = ((empty_69_fu_324_p2[0:0] == 1'b1) ? 4'd0 : current_dim_fu_80);

assign current_kernel_mid26_fu_272_p3 = ((empty_fu_266_p2[0:0] == 1'b1) ? 9'd0 : current_kernel_fu_84);

assign empty_68_fu_318_p2 = (icmp_ln240_mid213_fu_298_p2 | and_ln234_1_fu_240_p2);

assign empty_69_fu_324_p2 = (icmp_ln236_fu_208_p2 | empty_68_fu_318_p2);

assign empty_70_fu_366_p2 = (p_shl6_fu_346_p3 - p_shl7_fu_362_p1);

assign empty_fu_266_p2 = (icmp_ln236_fu_208_p2 | and_ln234_1_fu_240_p2);

assign exitcond_flatten_not_fu_280_p2 = (icmp_ln238_fu_234_p2 ^ 1'd1);

assign feature_collection_address0 = zext_ln242_2_fu_428_p1;

assign feature_collection_ce0 = feature_collection_ce0_local;

assign icmp_ln234_fu_178_p2 = ((indvar_flatten40_fu_104 == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_208_p2 = ((indvar_flatten14_fu_96 == 12'd1536) ? 1'b1 : 1'b0);

assign icmp_ln238_fu_234_p2 = ((indvar_flatten_fu_88 == 10'd256) ? 1'b1 : 1'b0);

assign icmp_ln240_fu_228_p2 = ((current_dim_fu_80 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln240_mid213_fu_298_p2 = (icmp_ln240_fu_228_p2 & and_ln234_fu_292_p2);

assign icmp_ln243_fu_437_p2 = ((current_dim_mid2_fu_330_p3 == 4'd7) ? 1'b1 : 1'b0);

assign not_exitcond_flatten_mid239_fu_286_p2 = (icmp_ln236_fu_208_p2 | exitcond_flatten_not_fu_280_p2);

assign out_vector_fu_537_p3 = ((icmp_ln243_reg_618[0:0] == 1'b1) ? add_ln244_fu_531_p2 : out_vector_1_fu_76);

assign output_buffer_address0 = zext_ln242_fu_526_p1;

assign output_buffer_ce0 = output_buffer_ce0_local;

assign output_buffer_d0 = feature_collection_q0;

assign output_buffer_we0 = output_buffer_we0_local;

assign p_shl6_fu_346_p3 = {{select_ln234_1_fu_252_p3}, {3'd0}};

assign p_shl7_fu_362_p1 = tmp_fu_354_p3;

assign p_shl_fu_390_p3 = {{add_ln242_fu_384_p2}, {5'd0}};

assign select_ln234_1_fu_252_p3 = ((icmp_ln236_fu_208_p2[0:0] == 1'b1) ? add_ln234_1_fu_246_p2 : grid_rows_fu_100);

assign select_ln234_fu_214_p3 = ((icmp_ln236_fu_208_p2[0:0] == 1'b1) ? 3'd0 : grid_cols_fu_92);

assign select_ln236_1_fu_469_p3 = ((icmp_ln236_fu_208_p2[0:0] == 1'b1) ? 12'd1 : add_ln236_1_fu_463_p2);

assign select_ln236_fu_304_p3 = ((and_ln234_1_fu_240_p2[0:0] == 1'b1) ? add_ln236_fu_260_p2 : select_ln234_fu_214_p3);

assign select_ln238_1_fu_455_p3 = ((empty_fu_266_p2[0:0] == 1'b1) ? 10'd1 : add_ln238_1_fu_449_p2);

assign select_ln238_fu_338_p3 = ((icmp_ln240_mid213_fu_298_p2[0:0] == 1'b1) ? add_ln238_fu_312_p2 : current_kernel_mid26_fu_272_p3);

assign tmp_14_fu_398_p3 = {{add_ln242_fu_384_p2}, {2'd0}};

assign tmp_fu_354_p3 = {{select_ln234_1_fu_252_p3}, {1'd0}};

assign trunc_ln240_fu_515_p1 = out_vector_1_fu_76[10:0];

assign trunc_ln242_fu_433_p1 = current_dim_mid2_fu_330_p3[2:0];

assign xor_ln234_fu_222_p2 = (icmp_ln236_fu_208_p2 ^ 1'd1);

assign zext_ln236_1_fu_376_p1 = select_ln236_fu_304_p3;

assign zext_ln236_fu_372_p1 = empty_70_fu_366_p2;

assign zext_ln240_fu_380_p1 = current_dim_mid2_fu_330_p3;

assign zext_ln242_1_fu_406_p1 = tmp_14_fu_398_p3;

assign zext_ln242_2_fu_428_p1 = add_ln242_1_fu_422_p2;

assign zext_ln242_fu_526_p1 = add_ln242_2_fu_519_p3;

endmodule //process_features_process_features_Pipeline_VITIS_LOOP_234_1_VITIS_LOOP_236_2_VITIS_LOOP_238_3_VIT
