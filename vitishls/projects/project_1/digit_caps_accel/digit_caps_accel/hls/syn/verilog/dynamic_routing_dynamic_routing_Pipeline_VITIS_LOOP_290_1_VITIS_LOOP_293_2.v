// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dynamic_routing_dynamic_routing_Pipeline_VITIS_LOOP_290_1_VITIS_LOOP_293_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        squashed_v_address0,
        squashed_v_ce0,
        squashed_v_q0,
        squashed_v_address1,
        squashed_v_ce1,
        squashed_v_q1,
        squashed_v_address2,
        squashed_v_ce2,
        squashed_v_q2,
        squashed_v_address3,
        squashed_v_ce3,
        squashed_v_q3,
        squashed_v_address4,
        squashed_v_ce4,
        squashed_v_q4,
        squashed_v_address5,
        squashed_v_ce5,
        squashed_v_q5,
        squashed_v_address6,
        squashed_v_ce6,
        squashed_v_q6,
        squashed_v_address7,
        squashed_v_ce7,
        squashed_v_q7,
        squashed_v_address8,
        squashed_v_ce8,
        squashed_v_q8,
        squashed_v_address9,
        squashed_v_ce9,
        squashed_v_q9,
        squashed_v_address10,
        squashed_v_ce10,
        squashed_v_q10,
        squashed_v_address11,
        squashed_v_ce11,
        squashed_v_q11,
        squashed_v_address12,
        squashed_v_ce12,
        squashed_v_q12,
        squashed_v_address13,
        squashed_v_ce13,
        squashed_v_q13,
        squashed_v_address14,
        squashed_v_ce14,
        squashed_v_q14,
        squashed_v_address15,
        squashed_v_ce15,
        squashed_v_q15,
        weighted_input_u_address0,
        weighted_input_u_ce0,
        weighted_input_u_q0,
        weighted_input_u_address1,
        weighted_input_u_ce1,
        weighted_input_u_q1,
        weighted_input_u_1_address0,
        weighted_input_u_1_ce0,
        weighted_input_u_1_q0,
        weighted_input_u_1_address1,
        weighted_input_u_1_ce1,
        weighted_input_u_1_q1,
        weighted_input_u_2_address0,
        weighted_input_u_2_ce0,
        weighted_input_u_2_q0,
        weighted_input_u_2_address1,
        weighted_input_u_2_ce1,
        weighted_input_u_2_q1,
        weighted_input_u_3_address0,
        weighted_input_u_3_ce0,
        weighted_input_u_3_q0,
        weighted_input_u_3_address1,
        weighted_input_u_3_ce1,
        weighted_input_u_3_q1,
        weighted_input_u_4_address0,
        weighted_input_u_4_ce0,
        weighted_input_u_4_q0,
        weighted_input_u_4_address1,
        weighted_input_u_4_ce1,
        weighted_input_u_4_q1,
        weighted_input_u_5_address0,
        weighted_input_u_5_ce0,
        weighted_input_u_5_q0,
        weighted_input_u_5_address1,
        weighted_input_u_5_ce1,
        weighted_input_u_5_q1,
        weighted_input_u_6_address0,
        weighted_input_u_6_ce0,
        weighted_input_u_6_q0,
        weighted_input_u_6_address1,
        weighted_input_u_6_ce1,
        weighted_input_u_6_q1,
        weighted_input_u_7_address0,
        weighted_input_u_7_ce0,
        weighted_input_u_7_q0,
        weighted_input_u_7_address1,
        weighted_input_u_7_ce1,
        weighted_input_u_7_q1,
        output_agreement_address0,
        output_agreement_ce0,
        output_agreement_we0,
        output_agreement_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] squashed_v_address0;
output   squashed_v_ce0;
input  [31:0] squashed_v_q0;
output  [7:0] squashed_v_address1;
output   squashed_v_ce1;
input  [31:0] squashed_v_q1;
output  [7:0] squashed_v_address2;
output   squashed_v_ce2;
input  [31:0] squashed_v_q2;
output  [7:0] squashed_v_address3;
output   squashed_v_ce3;
input  [31:0] squashed_v_q3;
output  [7:0] squashed_v_address4;
output   squashed_v_ce4;
input  [31:0] squashed_v_q4;
output  [7:0] squashed_v_address5;
output   squashed_v_ce5;
input  [31:0] squashed_v_q5;
output  [7:0] squashed_v_address6;
output   squashed_v_ce6;
input  [31:0] squashed_v_q6;
output  [7:0] squashed_v_address7;
output   squashed_v_ce7;
input  [31:0] squashed_v_q7;
output  [7:0] squashed_v_address8;
output   squashed_v_ce8;
input  [31:0] squashed_v_q8;
output  [7:0] squashed_v_address9;
output   squashed_v_ce9;
input  [31:0] squashed_v_q9;
output  [7:0] squashed_v_address10;
output   squashed_v_ce10;
input  [31:0] squashed_v_q10;
output  [7:0] squashed_v_address11;
output   squashed_v_ce11;
input  [31:0] squashed_v_q11;
output  [7:0] squashed_v_address12;
output   squashed_v_ce12;
input  [31:0] squashed_v_q12;
output  [7:0] squashed_v_address13;
output   squashed_v_ce13;
input  [31:0] squashed_v_q13;
output  [7:0] squashed_v_address14;
output   squashed_v_ce14;
input  [31:0] squashed_v_q14;
output  [7:0] squashed_v_address15;
output   squashed_v_ce15;
input  [31:0] squashed_v_q15;
output  [14:0] weighted_input_u_address0;
output   weighted_input_u_ce0;
input  [31:0] weighted_input_u_q0;
output  [14:0] weighted_input_u_address1;
output   weighted_input_u_ce1;
input  [31:0] weighted_input_u_q1;
output  [14:0] weighted_input_u_1_address0;
output   weighted_input_u_1_ce0;
input  [31:0] weighted_input_u_1_q0;
output  [14:0] weighted_input_u_1_address1;
output   weighted_input_u_1_ce1;
input  [31:0] weighted_input_u_1_q1;
output  [14:0] weighted_input_u_2_address0;
output   weighted_input_u_2_ce0;
input  [31:0] weighted_input_u_2_q0;
output  [14:0] weighted_input_u_2_address1;
output   weighted_input_u_2_ce1;
input  [31:0] weighted_input_u_2_q1;
output  [14:0] weighted_input_u_3_address0;
output   weighted_input_u_3_ce0;
input  [31:0] weighted_input_u_3_q0;
output  [14:0] weighted_input_u_3_address1;
output   weighted_input_u_3_ce1;
input  [31:0] weighted_input_u_3_q1;
output  [14:0] weighted_input_u_4_address0;
output   weighted_input_u_4_ce0;
input  [31:0] weighted_input_u_4_q0;
output  [14:0] weighted_input_u_4_address1;
output   weighted_input_u_4_ce1;
input  [31:0] weighted_input_u_4_q1;
output  [14:0] weighted_input_u_5_address0;
output   weighted_input_u_5_ce0;
input  [31:0] weighted_input_u_5_q0;
output  [14:0] weighted_input_u_5_address1;
output   weighted_input_u_5_ce1;
input  [31:0] weighted_input_u_5_q1;
output  [14:0] weighted_input_u_6_address0;
output   weighted_input_u_6_ce0;
input  [31:0] weighted_input_u_6_q0;
output  [14:0] weighted_input_u_6_address1;
output   weighted_input_u_6_ce1;
input  [31:0] weighted_input_u_6_q1;
output  [14:0] weighted_input_u_7_address0;
output   weighted_input_u_7_ce0;
input  [31:0] weighted_input_u_7_q0;
output  [14:0] weighted_input_u_7_address1;
output   weighted_input_u_7_ce1;
input  [31:0] weighted_input_u_7_q1;
output  [13:0] output_agreement_address0;
output   output_agreement_ce0;
output   output_agreement_we0;
output  [31:0] output_agreement_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln290_fu_630_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] select_ln290_fu_654_p3;
reg   [10:0] select_ln290_reg_1550;
reg   [10:0] select_ln290_reg_1550_pp0_iter1_reg;
reg   [10:0] select_ln290_reg_1550_pp0_iter2_reg;
wire   [3:0] select_ln290_1_fu_668_p3;
reg   [3:0] select_ln290_1_reg_1555;
reg   [3:0] select_ln290_1_reg_1555_pp0_iter1_reg;
reg   [3:0] select_ln290_1_reg_1555_pp0_iter2_reg;
wire   [63:0] zext_ln298_fu_746_p1;
reg   [63:0] zext_ln298_reg_1585;
reg   [13:0] tmp_39_reg_1605;
reg   [13:0] tmp_39_reg_1605_pp0_iter1_reg;
reg   [31:0] tmp_33_reg_1645;
wire   [47:0] mul_ln298_4_fu_564_p2;
reg   [47:0] mul_ln298_4_reg_1705;
reg   [31:0] tmp_35_reg_1710;
wire   [47:0] mul_ln298_5_fu_568_p2;
reg   [47:0] mul_ln298_5_reg_1715;
wire   [47:0] mul_ln298_6_fu_572_p2;
reg   [47:0] mul_ln298_6_reg_1720;
wire   [47:0] mul_ln298_7_fu_576_p2;
reg   [47:0] mul_ln298_7_reg_1725;
wire   [63:0] zext_ln298_1_fu_1095_p1;
reg   [63:0] zext_ln298_1_reg_1730;
wire   [47:0] mul_ln298_10_fu_588_p2;
reg   [47:0] mul_ln298_10_reg_1780;
reg   [31:0] tmp_42_reg_1785;
wire   [47:0] mul_ln298_11_fu_592_p2;
reg   [47:0] mul_ln298_11_reg_1790;
wire   [47:0] mul_ln298_12_fu_596_p2;
reg   [47:0] mul_ln298_12_reg_1795;
wire   [47:0] mul_ln298_13_fu_600_p2;
reg   [47:0] mul_ln298_13_reg_1800;
reg  signed [31:0] weighted_input_u_6_load_1_reg_1805;
wire   [13:0] add_ln300_fu_1356_p2;
reg   [13:0] add_ln300_reg_1815;
wire   [63:0] p_cast15_fu_684_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] p_cast16_fu_723_p1;
wire   [63:0] p_cast17_fu_800_p1;
wire   [63:0] p_cast18_fu_812_p1;
wire   [63:0] p_cast19_fu_824_p1;
wire   [63:0] p_cast20_fu_836_p1;
wire   [63:0] p_cast21_fu_848_p1;
wire   [63:0] p_cast22_fu_860_p1;
wire   [63:0] p_cast23_fu_946_p1;
wire   [63:0] p_cast24_fu_958_p1;
wire   [63:0] p_cast25_fu_970_p1;
wire   [63:0] p_cast26_fu_982_p1;
wire   [63:0] p_cast27_fu_994_p1;
wire   [63:0] p_cast28_fu_1006_p1;
wire   [63:0] p_cast29_fu_1167_p1;
wire   [63:0] p_cast30_fu_1179_p1;
wire   [63:0] zext_ln300_fu_1521_p1;
reg   [10:0] j_fu_130;
wire   [10:0] add_ln293_fu_762_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_1_fu_134;
reg   [3:0] ap_sig_allocacmp_i_1_load;
reg   [13:0] indvar_flatten20_fu_138;
wire   [13:0] add_ln290_fu_636_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten20_load;
reg    squashed_v_ce15_local;
reg    squashed_v_ce14_local;
reg    squashed_v_ce13_local;
reg    squashed_v_ce12_local;
reg    squashed_v_ce11_local;
reg    squashed_v_ce10_local;
reg    squashed_v_ce9_local;
reg    squashed_v_ce8_local;
reg    squashed_v_ce7_local;
reg    squashed_v_ce6_local;
reg    squashed_v_ce5_local;
reg    squashed_v_ce4_local;
reg    squashed_v_ce3_local;
reg    squashed_v_ce2_local;
reg    squashed_v_ce1_local;
reg    squashed_v_ce0_local;
reg    weighted_input_u_ce1_local;
reg    weighted_input_u_ce0_local;
reg    weighted_input_u_1_ce1_local;
reg    weighted_input_u_1_ce0_local;
reg    weighted_input_u_2_ce1_local;
reg    weighted_input_u_2_ce0_local;
reg    weighted_input_u_3_ce1_local;
reg    weighted_input_u_3_ce0_local;
reg    weighted_input_u_4_ce1_local;
reg    weighted_input_u_4_ce0_local;
reg    weighted_input_u_5_ce1_local;
reg    weighted_input_u_5_ce0_local;
reg    weighted_input_u_6_ce1_local;
reg    weighted_input_u_6_ce0_local;
reg    weighted_input_u_7_ce1_local;
reg    weighted_input_u_7_ce0_local;
reg    output_agreement_we0_local;
reg    output_agreement_ce0_local;
wire   [0:0] icmp_ln293_fu_648_p2;
wire   [3:0] add_ln290_1_fu_662_p2;
wire   [7:0] tmp_16_fu_676_p3;
wire   [11:0] tmp_115_fu_697_p3;
wire   [14:0] p_shl_fu_689_p3;
wire   [14:0] p_shl31_fu_705_p1;
wire   [7:0] tmp_17_fu_715_p3;
wire   [11:0] p_udiv_fu_728_p3;
wire   [14:0] p_udiv2527_cast_fu_736_p1;
wire   [14:0] p_udiv2428_fu_709_p2;
wire   [14:0] p_udiv26_fu_740_p2;
wire   [7:0] tmp_18_fu_793_p3;
wire   [7:0] tmp_19_fu_805_p3;
wire   [7:0] tmp_20_fu_817_p3;
wire   [7:0] tmp_21_fu_829_p3;
wire   [7:0] tmp_22_fu_841_p3;
wire   [7:0] tmp_23_fu_853_p3;
wire   [47:0] mul_ln298_fu_548_p2;
wire   [31:0] tmp_32_fu_875_p4;
wire   [47:0] shl_ln2_fu_885_p3;
wire   [47:0] mul_ln298_1_fu_552_p2;
wire   [47:0] add_ln298_fu_893_p2;
wire   [7:0] tmp_24_fu_939_p3;
wire   [7:0] tmp_25_fu_951_p3;
wire   [7:0] tmp_26_fu_963_p3;
wire   [7:0] tmp_27_fu_975_p3;
wire   [7:0] tmp_28_fu_987_p3;
wire   [7:0] tmp_29_fu_999_p3;
wire   [47:0] shl_ln298_1_fu_1016_p3;
wire   [47:0] mul_ln298_2_fu_556_p2;
wire   [47:0] add_ln298_1_fu_1023_p2;
wire   [31:0] tmp_34_fu_1034_p4;
wire   [47:0] shl_ln298_2_fu_1044_p3;
wire   [47:0] mul_ln298_3_fu_560_p2;
wire   [47:0] add_ln298_2_fu_1052_p2;
wire   [14:0] or_ln_fu_1088_p3;
wire   [10:0] tmp_fu_1113_p3;
wire   [13:0] p_shl1_fu_1106_p3;
wire   [13:0] p_shl33_fu_1120_p1;
wire   [7:0] tmp_30_fu_1160_p3;
wire   [7:0] tmp_31_fu_1172_p3;
wire   [47:0] shl_ln298_3_fu_1187_p3;
wire   [47:0] add_ln298_3_fu_1194_p2;
wire   [31:0] tmp_36_fu_1199_p4;
wire   [47:0] shl_ln298_4_fu_1209_p3;
wire   [47:0] add_ln298_4_fu_1217_p2;
wire   [31:0] tmp_37_fu_1222_p4;
wire   [47:0] shl_ln298_5_fu_1232_p3;
wire   [47:0] add_ln298_5_fu_1240_p2;
wire   [31:0] tmp_38_fu_1245_p4;
wire   [47:0] shl_ln298_6_fu_1255_p3;
wire   [47:0] add_ln298_6_fu_1263_p2;
wire   [31:0] tmp_40_fu_1273_p4;
wire   [47:0] shl_ln298_7_fu_1283_p3;
wire   [47:0] mul_ln298_8_fu_580_p2;
wire   [47:0] add_ln298_7_fu_1291_p2;
wire   [31:0] tmp_41_fu_1302_p4;
wire   [47:0] shl_ln298_8_fu_1312_p3;
wire   [47:0] mul_ln298_9_fu_584_p2;
wire   [47:0] add_ln298_8_fu_1320_p2;
wire   [13:0] zext_ln293_fu_1184_p1;
wire   [13:0] empty_fu_1124_p2;
wire   [47:0] shl_ln298_9_fu_1372_p3;
wire   [47:0] add_ln298_9_fu_1379_p2;
wire   [31:0] tmp_43_fu_1384_p4;
wire   [47:0] shl_ln298_s_fu_1394_p3;
wire   [47:0] add_ln298_10_fu_1402_p2;
wire   [31:0] tmp_44_fu_1407_p4;
wire   [47:0] shl_ln298_10_fu_1417_p3;
wire   [47:0] add_ln298_11_fu_1425_p2;
wire   [31:0] tmp_45_fu_1430_p4;
wire   [47:0] shl_ln298_11_fu_1440_p3;
wire   [47:0] add_ln298_12_fu_1448_p2;
wire   [31:0] tmp_46_fu_1457_p4;
wire   [47:0] shl_ln298_12_fu_1467_p3;
wire   [47:0] mul_ln298_14_fu_604_p2;
wire   [47:0] add_ln298_13_fu_1475_p2;
wire   [31:0] tmp_47_fu_1486_p4;
wire   [47:0] shl_ln298_13_fu_1496_p3;
wire   [47:0] mul_ln298_15_fu_608_p2;
wire   [47:0] add_ln298_14_fu_1504_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_130 = 11'd0;
#0 i_1_fu_134 = 4'd0;
#0 indvar_flatten20_fu_138 = 14'd0;
#0 ap_done_reg = 1'b0;
end

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U156(
    .din0(weighted_input_u_q1),
    .din1(squashed_v_q15),
    .dout(mul_ln298_fu_548_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U157(
    .din0(weighted_input_u_1_q1),
    .din1(squashed_v_q14),
    .dout(mul_ln298_1_fu_552_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U158(
    .din0(weighted_input_u_2_q1),
    .din1(squashed_v_q13),
    .dout(mul_ln298_2_fu_556_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U159(
    .din0(weighted_input_u_3_q1),
    .din1(squashed_v_q12),
    .dout(mul_ln298_3_fu_560_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U160(
    .din0(weighted_input_u_4_q1),
    .din1(squashed_v_q11),
    .dout(mul_ln298_4_fu_564_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U161(
    .din0(weighted_input_u_5_q1),
    .din1(squashed_v_q10),
    .dout(mul_ln298_5_fu_568_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U162(
    .din0(weighted_input_u_6_q1),
    .din1(squashed_v_q9),
    .dout(mul_ln298_6_fu_572_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U163(
    .din0(weighted_input_u_7_q1),
    .din1(squashed_v_q8),
    .dout(mul_ln298_7_fu_576_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U164(
    .din0(weighted_input_u_q0),
    .din1(squashed_v_q7),
    .dout(mul_ln298_8_fu_580_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U165(
    .din0(weighted_input_u_1_q0),
    .din1(squashed_v_q6),
    .dout(mul_ln298_9_fu_584_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U166(
    .din0(weighted_input_u_2_q0),
    .din1(squashed_v_q5),
    .dout(mul_ln298_10_fu_588_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U167(
    .din0(weighted_input_u_3_q0),
    .din1(squashed_v_q4),
    .dout(mul_ln298_11_fu_592_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U168(
    .din0(weighted_input_u_4_q0),
    .din1(squashed_v_q3),
    .dout(mul_ln298_12_fu_596_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U169(
    .din0(weighted_input_u_5_q0),
    .din1(squashed_v_q2),
    .dout(mul_ln298_13_fu_600_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U170(
    .din0(weighted_input_u_6_load_1_reg_1805),
    .din1(squashed_v_q1),
    .dout(mul_ln298_14_fu_604_p2)
);

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U171(
    .din0(weighted_input_u_7_q0),
    .din1(squashed_v_q0),
    .dout(mul_ln298_15_fu_608_p2)
);

dynamic_routing_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln290_fu_630_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_134 <= select_ln290_1_fu_668_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_134 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln290_fu_630_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten20_fu_138 <= add_ln290_fu_636_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_138 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln290_fu_630_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_130 <= add_ln293_fu_762_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_130 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln300_reg_1815 <= add_ln300_fu_1356_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln298_10_reg_1780 <= mul_ln298_10_fu_588_p2;
        mul_ln298_11_reg_1790 <= mul_ln298_11_fu_592_p2;
        mul_ln298_12_reg_1795 <= mul_ln298_12_fu_596_p2;
        mul_ln298_13_reg_1800 <= mul_ln298_13_fu_600_p2;
        mul_ln298_4_reg_1705 <= mul_ln298_4_fu_564_p2;
        mul_ln298_5_reg_1715 <= mul_ln298_5_fu_568_p2;
        mul_ln298_6_reg_1720 <= mul_ln298_6_fu_572_p2;
        mul_ln298_7_reg_1725 <= mul_ln298_7_fu_576_p2;
        select_ln290_1_reg_1555_pp0_iter2_reg <= select_ln290_1_reg_1555_pp0_iter1_reg;
        select_ln290_reg_1550_pp0_iter2_reg <= select_ln290_reg_1550_pp0_iter1_reg;
        tmp_35_reg_1710 <= {{add_ln298_2_fu_1052_p2[47:16]}};
        tmp_42_reg_1785 <= {{add_ln298_8_fu_1320_p2[47:16]}};
        zext_ln298_1_reg_1730[14 : 1] <= zext_ln298_1_fu_1095_p1[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln290_1_reg_1555 <= select_ln290_1_fu_668_p3;
        select_ln290_1_reg_1555_pp0_iter1_reg <= select_ln290_1_reg_1555;
        select_ln290_reg_1550 <= select_ln290_fu_654_p3;
        select_ln290_reg_1550_pp0_iter1_reg <= select_ln290_reg_1550;
        tmp_33_reg_1645 <= {{add_ln298_fu_893_p2[47:16]}};
        tmp_39_reg_1605 <= {{p_udiv26_fu_740_p2[14:1]}};
        tmp_39_reg_1605_pp0_iter1_reg <= tmp_39_reg_1605;
        zext_ln298_reg_1585[14 : 1] <= zext_ln298_fu_746_p1[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weighted_input_u_6_load_1_reg_1805 <= weighted_input_u_6_q0;
    end
end

always @ (*) begin
    if (((icmp_ln290_fu_630_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1_load = i_1_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_138;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 11'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_agreement_ce0_local = 1'b1;
    end else begin
        output_agreement_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_agreement_we0_local = 1'b1;
    end else begin
        output_agreement_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        squashed_v_ce0_local = 1'b1;
    end else begin
        squashed_v_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce10_local = 1'b1;
    end else begin
        squashed_v_ce10_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce11_local = 1'b1;
    end else begin
        squashed_v_ce11_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce12_local = 1'b1;
    end else begin
        squashed_v_ce12_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce13_local = 1'b1;
    end else begin
        squashed_v_ce13_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce14_local = 1'b1;
    end else begin
        squashed_v_ce14_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce15_local = 1'b1;
    end else begin
        squashed_v_ce15_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        squashed_v_ce1_local = 1'b1;
    end else begin
        squashed_v_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        squashed_v_ce2_local = 1'b1;
    end else begin
        squashed_v_ce2_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        squashed_v_ce3_local = 1'b1;
    end else begin
        squashed_v_ce3_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        squashed_v_ce4_local = 1'b1;
    end else begin
        squashed_v_ce4_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        squashed_v_ce5_local = 1'b1;
    end else begin
        squashed_v_ce5_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        squashed_v_ce6_local = 1'b1;
    end else begin
        squashed_v_ce6_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        squashed_v_ce7_local = 1'b1;
    end else begin
        squashed_v_ce7_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce8_local = 1'b1;
    end else begin
        squashed_v_ce8_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squashed_v_ce9_local = 1'b1;
    end else begin
        squashed_v_ce9_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_1_ce0_local = 1'b1;
    end else begin
        weighted_input_u_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_1_ce1_local = 1'b1;
    end else begin
        weighted_input_u_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_2_ce0_local = 1'b1;
    end else begin
        weighted_input_u_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_2_ce1_local = 1'b1;
    end else begin
        weighted_input_u_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_3_ce0_local = 1'b1;
    end else begin
        weighted_input_u_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_3_ce1_local = 1'b1;
    end else begin
        weighted_input_u_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_4_ce0_local = 1'b1;
    end else begin
        weighted_input_u_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_4_ce1_local = 1'b1;
    end else begin
        weighted_input_u_4_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_5_ce0_local = 1'b1;
    end else begin
        weighted_input_u_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_5_ce1_local = 1'b1;
    end else begin
        weighted_input_u_5_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_6_ce0_local = 1'b1;
    end else begin
        weighted_input_u_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_6_ce1_local = 1'b1;
    end else begin
        weighted_input_u_6_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weighted_input_u_7_ce0_local = 1'b1;
    end else begin
        weighted_input_u_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_7_ce1_local = 1'b1;
    end else begin
        weighted_input_u_7_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weighted_input_u_ce0_local = 1'b1;
    end else begin
        weighted_input_u_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weighted_input_u_ce1_local = 1'b1;
    end else begin
        weighted_input_u_ce1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln290_1_fu_662_p2 = (ap_sig_allocacmp_i_1_load + 4'd1);

assign add_ln290_fu_636_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 14'd1);

assign add_ln293_fu_762_p2 = (select_ln290_fu_654_p3 + 11'd1);

assign add_ln298_10_fu_1402_p2 = (shl_ln298_s_fu_1394_p3 + mul_ln298_11_reg_1790);

assign add_ln298_11_fu_1425_p2 = (shl_ln298_10_fu_1417_p3 + mul_ln298_12_reg_1795);

assign add_ln298_12_fu_1448_p2 = (shl_ln298_11_fu_1440_p3 + mul_ln298_13_reg_1800);

assign add_ln298_13_fu_1475_p2 = (shl_ln298_12_fu_1467_p3 + mul_ln298_14_fu_604_p2);

assign add_ln298_14_fu_1504_p2 = (shl_ln298_13_fu_1496_p3 + mul_ln298_15_fu_608_p2);

assign add_ln298_1_fu_1023_p2 = (shl_ln298_1_fu_1016_p3 + mul_ln298_2_fu_556_p2);

assign add_ln298_2_fu_1052_p2 = (shl_ln298_2_fu_1044_p3 + mul_ln298_3_fu_560_p2);

assign add_ln298_3_fu_1194_p2 = (shl_ln298_3_fu_1187_p3 + mul_ln298_4_reg_1705);

assign add_ln298_4_fu_1217_p2 = (shl_ln298_4_fu_1209_p3 + mul_ln298_5_reg_1715);

assign add_ln298_5_fu_1240_p2 = (shl_ln298_5_fu_1232_p3 + mul_ln298_6_reg_1720);

assign add_ln298_6_fu_1263_p2 = (shl_ln298_6_fu_1255_p3 + mul_ln298_7_reg_1725);

assign add_ln298_7_fu_1291_p2 = (shl_ln298_7_fu_1283_p3 + mul_ln298_8_fu_580_p2);

assign add_ln298_8_fu_1320_p2 = (shl_ln298_8_fu_1312_p3 + mul_ln298_9_fu_584_p2);

assign add_ln298_9_fu_1379_p2 = (shl_ln298_9_fu_1372_p3 + mul_ln298_10_reg_1780);

assign add_ln298_fu_893_p2 = (shl_ln2_fu_885_p3 + mul_ln298_1_fu_552_p2);

assign add_ln300_fu_1356_p2 = (zext_ln293_fu_1184_p1 + empty_fu_1124_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_1124_p2 = (p_shl1_fu_1106_p3 + p_shl33_fu_1120_p1);

assign icmp_ln290_fu_630_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 14'd11520) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_648_p2 = ((ap_sig_allocacmp_j_load == 11'd1152) ? 1'b1 : 1'b0);

assign or_ln_fu_1088_p3 = {{tmp_39_reg_1605_pp0_iter1_reg}, {1'd1}};

assign output_agreement_address0 = zext_ln300_fu_1521_p1;

assign output_agreement_ce0 = output_agreement_ce0_local;

assign output_agreement_d0 = {{add_ln298_14_fu_1504_p2[47:16]}};

assign output_agreement_we0 = output_agreement_we0_local;

assign p_cast15_fu_684_p1 = tmp_16_fu_676_p3;

assign p_cast16_fu_723_p1 = tmp_17_fu_715_p3;

assign p_cast17_fu_800_p1 = tmp_18_fu_793_p3;

assign p_cast18_fu_812_p1 = tmp_19_fu_805_p3;

assign p_cast19_fu_824_p1 = tmp_20_fu_817_p3;

assign p_cast20_fu_836_p1 = tmp_21_fu_829_p3;

assign p_cast21_fu_848_p1 = tmp_22_fu_841_p3;

assign p_cast22_fu_860_p1 = tmp_23_fu_853_p3;

assign p_cast23_fu_946_p1 = tmp_24_fu_939_p3;

assign p_cast24_fu_958_p1 = tmp_25_fu_951_p3;

assign p_cast25_fu_970_p1 = tmp_26_fu_963_p3;

assign p_cast26_fu_982_p1 = tmp_27_fu_975_p3;

assign p_cast27_fu_994_p1 = tmp_28_fu_987_p3;

assign p_cast28_fu_1006_p1 = tmp_29_fu_999_p3;

assign p_cast29_fu_1167_p1 = tmp_30_fu_1160_p3;

assign p_cast30_fu_1179_p1 = tmp_31_fu_1172_p3;

assign p_shl1_fu_1106_p3 = {{select_ln290_1_reg_1555_pp0_iter2_reg}, {10'd0}};

assign p_shl31_fu_705_p1 = tmp_115_fu_697_p3;

assign p_shl33_fu_1120_p1 = tmp_fu_1113_p3;

assign p_shl_fu_689_p3 = {{select_ln290_1_fu_668_p3}, {11'd0}};

assign p_udiv2428_fu_709_p2 = (p_shl_fu_689_p3 + p_shl31_fu_705_p1);

assign p_udiv2527_cast_fu_736_p1 = p_udiv_fu_728_p3;

assign p_udiv26_fu_740_p2 = (p_udiv2527_cast_fu_736_p1 + p_udiv2428_fu_709_p2);

assign p_udiv_fu_728_p3 = {{select_ln290_fu_654_p3}, {1'd0}};

assign select_ln290_1_fu_668_p3 = ((icmp_ln293_fu_648_p2[0:0] == 1'b1) ? add_ln290_1_fu_662_p2 : ap_sig_allocacmp_i_1_load);

assign select_ln290_fu_654_p3 = ((icmp_ln293_fu_648_p2[0:0] == 1'b1) ? 11'd0 : ap_sig_allocacmp_j_load);

assign shl_ln298_10_fu_1417_p3 = {{tmp_44_fu_1407_p4}, {16'd0}};

assign shl_ln298_11_fu_1440_p3 = {{tmp_45_fu_1430_p4}, {16'd0}};

assign shl_ln298_12_fu_1467_p3 = {{tmp_46_fu_1457_p4}, {16'd0}};

assign shl_ln298_13_fu_1496_p3 = {{tmp_47_fu_1486_p4}, {16'd0}};

assign shl_ln298_1_fu_1016_p3 = {{tmp_33_reg_1645}, {16'd0}};

assign shl_ln298_2_fu_1044_p3 = {{tmp_34_fu_1034_p4}, {16'd0}};

assign shl_ln298_3_fu_1187_p3 = {{tmp_35_reg_1710}, {16'd0}};

assign shl_ln298_4_fu_1209_p3 = {{tmp_36_fu_1199_p4}, {16'd0}};

assign shl_ln298_5_fu_1232_p3 = {{tmp_37_fu_1222_p4}, {16'd0}};

assign shl_ln298_6_fu_1255_p3 = {{tmp_38_fu_1245_p4}, {16'd0}};

assign shl_ln298_7_fu_1283_p3 = {{tmp_40_fu_1273_p4}, {16'd0}};

assign shl_ln298_8_fu_1312_p3 = {{tmp_41_fu_1302_p4}, {16'd0}};

assign shl_ln298_9_fu_1372_p3 = {{tmp_42_reg_1785}, {16'd0}};

assign shl_ln298_s_fu_1394_p3 = {{tmp_43_fu_1384_p4}, {16'd0}};

assign shl_ln2_fu_885_p3 = {{tmp_32_fu_875_p4}, {16'd0}};

assign squashed_v_address0 = p_cast30_fu_1179_p1;

assign squashed_v_address1 = p_cast29_fu_1167_p1;

assign squashed_v_address10 = p_cast20_fu_836_p1;

assign squashed_v_address11 = p_cast19_fu_824_p1;

assign squashed_v_address12 = p_cast18_fu_812_p1;

assign squashed_v_address13 = p_cast17_fu_800_p1;

assign squashed_v_address14 = p_cast16_fu_723_p1;

assign squashed_v_address15 = p_cast15_fu_684_p1;

assign squashed_v_address2 = p_cast28_fu_1006_p1;

assign squashed_v_address3 = p_cast27_fu_994_p1;

assign squashed_v_address4 = p_cast26_fu_982_p1;

assign squashed_v_address5 = p_cast25_fu_970_p1;

assign squashed_v_address6 = p_cast24_fu_958_p1;

assign squashed_v_address7 = p_cast23_fu_946_p1;

assign squashed_v_address8 = p_cast22_fu_860_p1;

assign squashed_v_address9 = p_cast21_fu_848_p1;

assign squashed_v_ce0 = squashed_v_ce0_local;

assign squashed_v_ce1 = squashed_v_ce1_local;

assign squashed_v_ce10 = squashed_v_ce10_local;

assign squashed_v_ce11 = squashed_v_ce11_local;

assign squashed_v_ce12 = squashed_v_ce12_local;

assign squashed_v_ce13 = squashed_v_ce13_local;

assign squashed_v_ce14 = squashed_v_ce14_local;

assign squashed_v_ce15 = squashed_v_ce15_local;

assign squashed_v_ce2 = squashed_v_ce2_local;

assign squashed_v_ce3 = squashed_v_ce3_local;

assign squashed_v_ce4 = squashed_v_ce4_local;

assign squashed_v_ce5 = squashed_v_ce5_local;

assign squashed_v_ce6 = squashed_v_ce6_local;

assign squashed_v_ce7 = squashed_v_ce7_local;

assign squashed_v_ce8 = squashed_v_ce8_local;

assign squashed_v_ce9 = squashed_v_ce9_local;

assign tmp_115_fu_697_p3 = {{select_ln290_1_fu_668_p3}, {8'd0}};

assign tmp_16_fu_676_p3 = {{select_ln290_1_fu_668_p3}, {4'd0}};

assign tmp_17_fu_715_p3 = {{select_ln290_1_fu_668_p3}, {4'd1}};

assign tmp_18_fu_793_p3 = {{select_ln290_1_reg_1555}, {4'd2}};

assign tmp_19_fu_805_p3 = {{select_ln290_1_reg_1555}, {4'd3}};

assign tmp_20_fu_817_p3 = {{select_ln290_1_reg_1555}, {4'd4}};

assign tmp_21_fu_829_p3 = {{select_ln290_1_reg_1555}, {4'd5}};

assign tmp_22_fu_841_p3 = {{select_ln290_1_reg_1555}, {4'd6}};

assign tmp_23_fu_853_p3 = {{select_ln290_1_reg_1555}, {4'd7}};

assign tmp_24_fu_939_p3 = {{select_ln290_1_reg_1555_pp0_iter1_reg}, {4'd8}};

assign tmp_25_fu_951_p3 = {{select_ln290_1_reg_1555_pp0_iter1_reg}, {4'd9}};

assign tmp_26_fu_963_p3 = {{select_ln290_1_reg_1555_pp0_iter1_reg}, {4'd10}};

assign tmp_27_fu_975_p3 = {{select_ln290_1_reg_1555_pp0_iter1_reg}, {4'd11}};

assign tmp_28_fu_987_p3 = {{select_ln290_1_reg_1555_pp0_iter1_reg}, {4'd12}};

assign tmp_29_fu_999_p3 = {{select_ln290_1_reg_1555_pp0_iter1_reg}, {4'd13}};

assign tmp_30_fu_1160_p3 = {{select_ln290_1_reg_1555_pp0_iter2_reg}, {4'd14}};

assign tmp_31_fu_1172_p3 = {{select_ln290_1_reg_1555_pp0_iter2_reg}, {4'd15}};

assign tmp_32_fu_875_p4 = {{mul_ln298_fu_548_p2[47:16]}};

assign tmp_34_fu_1034_p4 = {{add_ln298_1_fu_1023_p2[47:16]}};

assign tmp_36_fu_1199_p4 = {{add_ln298_3_fu_1194_p2[47:16]}};

assign tmp_37_fu_1222_p4 = {{add_ln298_4_fu_1217_p2[47:16]}};

assign tmp_38_fu_1245_p4 = {{add_ln298_5_fu_1240_p2[47:16]}};

assign tmp_40_fu_1273_p4 = {{add_ln298_6_fu_1263_p2[47:16]}};

assign tmp_41_fu_1302_p4 = {{add_ln298_7_fu_1291_p2[47:16]}};

assign tmp_43_fu_1384_p4 = {{add_ln298_9_fu_1379_p2[47:16]}};

assign tmp_44_fu_1407_p4 = {{add_ln298_10_fu_1402_p2[47:16]}};

assign tmp_45_fu_1430_p4 = {{add_ln298_11_fu_1425_p2[47:16]}};

assign tmp_46_fu_1457_p4 = {{add_ln298_12_fu_1448_p2[47:16]}};

assign tmp_47_fu_1486_p4 = {{add_ln298_13_fu_1475_p2[47:16]}};

assign tmp_fu_1113_p3 = {{select_ln290_1_reg_1555_pp0_iter2_reg}, {7'd0}};

assign weighted_input_u_1_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_1_address1 = zext_ln298_fu_746_p1;

assign weighted_input_u_1_ce0 = weighted_input_u_1_ce0_local;

assign weighted_input_u_1_ce1 = weighted_input_u_1_ce1_local;

assign weighted_input_u_2_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_2_address1 = zext_ln298_reg_1585;

assign weighted_input_u_2_ce0 = weighted_input_u_2_ce0_local;

assign weighted_input_u_2_ce1 = weighted_input_u_2_ce1_local;

assign weighted_input_u_3_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_3_address1 = zext_ln298_reg_1585;

assign weighted_input_u_3_ce0 = weighted_input_u_3_ce0_local;

assign weighted_input_u_3_ce1 = weighted_input_u_3_ce1_local;

assign weighted_input_u_4_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_4_address1 = zext_ln298_reg_1585;

assign weighted_input_u_4_ce0 = weighted_input_u_4_ce0_local;

assign weighted_input_u_4_ce1 = weighted_input_u_4_ce1_local;

assign weighted_input_u_5_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_5_address1 = zext_ln298_reg_1585;

assign weighted_input_u_5_ce0 = weighted_input_u_5_ce0_local;

assign weighted_input_u_5_ce1 = weighted_input_u_5_ce1_local;

assign weighted_input_u_6_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_6_address1 = zext_ln298_reg_1585;

assign weighted_input_u_6_ce0 = weighted_input_u_6_ce0_local;

assign weighted_input_u_6_ce1 = weighted_input_u_6_ce1_local;

assign weighted_input_u_7_address0 = zext_ln298_1_reg_1730;

assign weighted_input_u_7_address1 = zext_ln298_reg_1585;

assign weighted_input_u_7_ce0 = weighted_input_u_7_ce0_local;

assign weighted_input_u_7_ce1 = weighted_input_u_7_ce1_local;

assign weighted_input_u_address0 = zext_ln298_1_fu_1095_p1;

assign weighted_input_u_address1 = zext_ln298_fu_746_p1;

assign weighted_input_u_ce0 = weighted_input_u_ce0_local;

assign weighted_input_u_ce1 = weighted_input_u_ce1_local;

assign zext_ln293_fu_1184_p1 = select_ln290_reg_1550_pp0_iter2_reg;

assign zext_ln298_1_fu_1095_p1 = or_ln_fu_1088_p3;

assign zext_ln298_fu_746_p1 = p_udiv26_fu_740_p2;

assign zext_ln300_fu_1521_p1 = add_ln300_reg_1815;

always @ (posedge ap_clk) begin
    zext_ln298_reg_1585[0] <= 1'b0;
    zext_ln298_reg_1585[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln298_1_reg_1730[0] <= 1'b1;
    zext_ln298_1_reg_1730[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //dynamic_routing_dynamic_routing_Pipeline_VITIS_LOOP_290_1_VITIS_LOOP_293_2
