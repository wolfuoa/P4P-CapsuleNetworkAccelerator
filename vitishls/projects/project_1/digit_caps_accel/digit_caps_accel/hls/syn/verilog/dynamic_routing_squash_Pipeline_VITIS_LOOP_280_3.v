// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dynamic_routing_squash_Pipeline_VITIS_LOOP_280_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_10,
        input_mat_address0,
        input_mat_ce0,
        input_mat_q0,
        sext_ln280,
        squash_mat_address0,
        squash_mat_ce0,
        squash_mat_we0,
        squash_mat_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] tmp_10;
output  [7:0] input_mat_address0;
output   input_mat_ce0;
input  [31:0] input_mat_q0;
input  [31:0] sext_ln280;
output  [7:0] squash_mat_address0;
output   squash_mat_ce0;
output   squash_mat_we0;
output  [31:0] squash_mat_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln280_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [47:0] sext_ln280_cast_fu_98_p1;
reg  signed [47:0] sext_ln280_cast_reg_165;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln282_fu_132_p1;
reg   [63:0] zext_ln282_reg_173;
wire    ap_block_pp0_stage0;
reg   [4:0] dim_fu_52;
wire   [4:0] add_ln280_fu_116_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_dim_1;
reg    input_mat_ce0_local;
reg    squash_mat_we0_local;
reg    squash_mat_ce0_local;
wire  signed [31:0] mul_ln282_fu_94_p1;
wire   [7:0] zext_ln280_fu_122_p1;
wire   [7:0] add_ln282_fu_126_p2;
wire   [47:0] mul_ln282_fu_94_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 dim_fu_52 = 5'd0;
#0 ap_done_reg = 1'b0;
end

dynamic_routing_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U142(
    .din0(input_mat_q0),
    .din1(mul_ln282_fu_94_p1),
    .dout(mul_ln282_fu_94_p2)
);

dynamic_routing_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln280_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            dim_fu_52 <= add_ln280_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            dim_fu_52 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln280_cast_reg_165 <= sext_ln280_cast_fu_98_p1;
        zext_ln282_reg_173[7 : 0] <= zext_ln282_fu_132_p1[7 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln280_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_dim_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_dim_1 = dim_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_mat_ce0_local = 1'b1;
    end else begin
        input_mat_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squash_mat_ce0_local = 1'b1;
    end else begin
        squash_mat_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        squash_mat_we0_local = 1'b1;
    end else begin
        squash_mat_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln280_fu_116_p2 = (ap_sig_allocacmp_dim_1 + 5'd1);

assign add_ln282_fu_126_p2 = (zext_ln280_fu_122_p1 + tmp_10);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln280_fu_110_p2 = ((ap_sig_allocacmp_dim_1 == 5'd16) ? 1'b1 : 1'b0);

assign input_mat_address0 = zext_ln282_fu_132_p1;

assign input_mat_ce0 = input_mat_ce0_local;

assign mul_ln282_fu_94_p1 = sext_ln280_cast_reg_165;

assign sext_ln280_cast_fu_98_p1 = $signed(sext_ln280);

assign squash_mat_address0 = zext_ln282_reg_173;

assign squash_mat_ce0 = squash_mat_ce0_local;

assign squash_mat_d0 = {{mul_ln282_fu_94_p2[47:16]}};

assign squash_mat_we0 = squash_mat_we0_local;

assign zext_ln280_fu_122_p1 = ap_sig_allocacmp_dim_1;

assign zext_ln282_fu_132_p1 = add_ln282_fu_126_p2;

always @ (posedge ap_clk) begin
    zext_ln282_reg_173[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //dynamic_routing_squash_Pipeline_VITIS_LOOP_280_3
