-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_features_process_features_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_237_2_VITIS_LOOP_239_3_VIT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feature_collection_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    feature_collection_ce0 : OUT STD_LOGIC;
    feature_collection_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buffer_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_buffer_ce0 : OUT STD_LOGIC;
    output_buffer_we0 : OUT STD_LOGIC;
    output_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of process_features_process_features_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_237_2_VITIS_LOOP_239_3_VIT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv12_600 : STD_LOGIC_VECTOR (11 downto 0) := "011000000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln237_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln235_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln235_reg_780 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln235_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln235_1_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_fu_565_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln243_reg_806 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln244_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln244_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln243_2_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln243_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_vector_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal out_vector_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal current_dim_fu_80 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln241_fu_579_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal current_kernel_fu_84 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln239_fu_470_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln239_1_fu_297_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grid_cols_fu_92 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln237_fu_439_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten14_fu_96 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln237_1_fu_311_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grid_rows_fu_100 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln235_1_fu_398_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten40_fu_104 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln235_fu_237_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal feature_collection_ce0_local : STD_LOGIC;
    signal output_buffer_we0_local : STD_LOGIC;
    signal output_buffer_ce0_local : STD_LOGIC;
    signal add_ln239_1_fu_291_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln237_1_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln235_1_fu_392_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln235_fu_379_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_not_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid239_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln235_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln237_fu_405_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal current_kernel_mid26_fu_411_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln241_mid213_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_67_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_68_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln239_fu_446_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_486_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl6_fu_478_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_fu_494_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_69_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal current_dim_mid2_fu_462_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln241_fu_512_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln243_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_530_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_522_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln243_1_fu_538_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_fu_504_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln243_4_fu_542_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln243_3_fu_548_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_1_fu_508_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln243_1_fu_554_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln241_fu_639_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln243_2_fu_643_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln245_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_features_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component process_features_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    current_dim_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    current_dim_fu_80 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    current_dim_fu_80 <= add_ln241_fu_579_p2;
                end if;
            end if; 
        end if;
    end process;

    current_kernel_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    current_kernel_fu_84 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    current_kernel_fu_84 <= select_ln239_fu_470_p3;
                end if;
            end if; 
        end if;
    end process;

    grid_cols_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    grid_cols_fu_92 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    grid_cols_fu_92 <= select_ln237_fu_439_p3;
                end if;
            end if; 
        end if;
    end process;

    grid_rows_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    grid_rows_fu_100 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    grid_rows_fu_100 <= select_ln235_1_fu_398_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten14_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten14_fu_96 <= ap_const_lv12_0;
                elsif (((icmp_ln235_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten14_fu_96 <= select_ln237_1_fu_311_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten40_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten40_fu_104 <= ap_const_lv14_0;
                elsif (((icmp_ln235_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten40_fu_104 <= add_ln235_fu_237_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv10_0;
                elsif (((icmp_ln235_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_88 <= select_ln239_1_fu_297_p3;
                end if;
            end if; 
        end if;
    end process;

    out_vector_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    out_vector_1_fu_76 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    out_vector_1_fu_76 <= out_vector_fu_669_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln235_1_reg_790 <= and_ln235_1_fu_279_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_reg_796 <= empty_fu_285_p2;
                icmp_ln237_reg_772 <= icmp_ln237_fu_261_p2;
                icmp_ln239_reg_785 <= icmp_ln239_fu_273_p2;
                xor_ln235_reg_780 <= xor_ln235_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln244_reg_811 <= icmp_ln244_fu_573_p2;
                trunc_ln243_reg_806 <= trunc_ln243_fu_565_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln235_1_fu_392_p2 <= std_logic_vector(unsigned(grid_rows_fu_100) + unsigned(ap_const_lv3_1));
    add_ln235_fu_237_p2 <= std_logic_vector(unsigned(indvar_flatten40_fu_104) + unsigned(ap_const_lv14_1));
    add_ln237_1_fu_305_p2 <= std_logic_vector(unsigned(indvar_flatten14_fu_96) + unsigned(ap_const_lv12_1));
    add_ln237_fu_405_p2 <= std_logic_vector(unsigned(select_ln235_fu_379_p3) + unsigned(ap_const_lv3_1));
    add_ln239_1_fu_291_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_88) + unsigned(ap_const_lv10_1));
    add_ln239_fu_446_p2 <= std_logic_vector(unsigned(current_kernel_mid26_fu_411_p3) + unsigned(ap_const_lv9_8));
    add_ln241_fu_579_p2 <= std_logic_vector(unsigned(current_dim_mid2_fu_462_p3) + unsigned(ap_const_lv4_1));
    add_ln243_1_fu_554_p2 <= std_logic_vector(unsigned(add_ln243_3_fu_548_p2) + unsigned(zext_ln237_1_fu_508_p1));
    add_ln243_2_fu_643_p3 <= (trunc_ln241_fu_639_p1 & trunc_ln243_reg_806);
    add_ln243_3_fu_548_p2 <= std_logic_vector(unsigned(zext_ln237_fu_504_p1) + unsigned(add_ln243_4_fu_542_p2));
    add_ln243_4_fu_542_p2 <= std_logic_vector(unsigned(p_shl_fu_522_p3) + unsigned(zext_ln243_1_fu_538_p1));
    add_ln243_fu_516_p2 <= std_logic_vector(unsigned(zext_ln241_fu_512_p1) + unsigned(select_ln239_fu_470_p3));
    add_ln245_fu_663_p2 <= std_logic_vector(unsigned(out_vector_1_fu_76) + unsigned(ap_const_lv32_1));
    and_ln235_1_fu_279_p2 <= (xor_ln235_fu_267_p2 and icmp_ln239_fu_273_p2);
    and_ln235_fu_428_p2 <= (xor_ln235_reg_780 and not_exitcond_flatten_mid239_fu_423_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln235_fu_243_p2)
    begin
        if (((icmp_ln235_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    current_dim_mid2_fu_462_p3 <= 
        ap_const_lv4_0 when (empty_68_fu_457_p2(0) = '1') else 
        current_dim_fu_80;
    current_kernel_mid26_fu_411_p3 <= 
        ap_const_lv9_0 when (empty_reg_796(0) = '1') else 
        current_kernel_fu_84;
    empty_67_fu_452_p2 <= (icmp_ln241_mid213_fu_433_p2 or and_ln235_1_reg_790);
    empty_68_fu_457_p2 <= (icmp_ln237_reg_772 or empty_67_fu_452_p2);
    empty_69_fu_498_p2 <= std_logic_vector(unsigned(p_shl6_fu_478_p3) - unsigned(p_shl7_fu_494_p1));
    empty_fu_285_p2 <= (icmp_ln237_fu_261_p2 or and_ln235_1_fu_279_p2);
    exitcond_flatten_not_fu_418_p2 <= (icmp_ln239_reg_785 xor ap_const_lv1_1);
    feature_collection_address0 <= zext_ln243_2_fu_560_p1(14 - 1 downto 0);
    feature_collection_ce0 <= feature_collection_ce0_local;

    feature_collection_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            feature_collection_ce0_local <= ap_const_logic_1;
        else 
            feature_collection_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln235_fu_243_p2 <= "1" when (indvar_flatten40_fu_104 = ap_const_lv14_2400) else "0";
    icmp_ln237_fu_261_p2 <= "1" when (indvar_flatten14_fu_96 = ap_const_lv12_600) else "0";
    icmp_ln239_fu_273_p2 <= "1" when (indvar_flatten_fu_88 = ap_const_lv10_100) else "0";
    icmp_ln241_fu_386_p2 <= "1" when (current_dim_fu_80 = ap_const_lv4_8) else "0";
    icmp_ln241_mid213_fu_433_p2 <= (icmp_ln241_fu_386_p2 and and_ln235_fu_428_p2);
    icmp_ln244_fu_573_p2 <= "1" when (current_dim_mid2_fu_462_p3 = ap_const_lv4_7) else "0";
    not_exitcond_flatten_mid239_fu_423_p2 <= (icmp_ln237_reg_772 or exitcond_flatten_not_fu_418_p2);
    out_vector_fu_669_p3 <= 
        add_ln245_fu_663_p2 when (icmp_ln244_reg_811(0) = '1') else 
        out_vector_1_fu_76;
    output_buffer_address0 <= zext_ln243_fu_650_p1(14 - 1 downto 0);
    output_buffer_ce0 <= output_buffer_ce0_local;

    output_buffer_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_buffer_ce0_local <= ap_const_logic_1;
        else 
            output_buffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_buffer_d0 <= feature_collection_q0;
    output_buffer_we0 <= output_buffer_we0_local;

    output_buffer_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_buffer_we0_local <= ap_const_logic_1;
        else 
            output_buffer_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_shl6_fu_478_p3 <= (select_ln235_1_fu_398_p3 & ap_const_lv3_0);
    p_shl7_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_486_p3),6));
    p_shl_fu_522_p3 <= (add_ln243_fu_516_p2 & ap_const_lv5_0);
    select_ln235_1_fu_398_p3 <= 
        add_ln235_1_fu_392_p2 when (icmp_ln237_reg_772(0) = '1') else 
        grid_rows_fu_100;
    select_ln235_fu_379_p3 <= 
        ap_const_lv3_0 when (icmp_ln237_reg_772(0) = '1') else 
        grid_cols_fu_92;
    select_ln237_1_fu_311_p3 <= 
        ap_const_lv12_1 when (icmp_ln237_fu_261_p2(0) = '1') else 
        add_ln237_1_fu_305_p2;
    select_ln237_fu_439_p3 <= 
        add_ln237_fu_405_p2 when (and_ln235_1_reg_790(0) = '1') else 
        select_ln235_fu_379_p3;
    select_ln239_1_fu_297_p3 <= 
        ap_const_lv10_1 when (empty_fu_285_p2(0) = '1') else 
        add_ln239_1_fu_291_p2;
    select_ln239_fu_470_p3 <= 
        add_ln239_fu_446_p2 when (icmp_ln241_mid213_fu_433_p2(0) = '1') else 
        current_kernel_mid26_fu_411_p3;
    tmp_15_fu_530_p3 <= (add_ln243_fu_516_p2 & ap_const_lv2_0);
    tmp_fu_486_p3 <= (select_ln235_1_fu_398_p3 & ap_const_lv1_0);
    trunc_ln241_fu_639_p1 <= out_vector_1_fu_76(11 - 1 downto 0);
    trunc_ln243_fu_565_p1 <= current_dim_mid2_fu_462_p3(3 - 1 downto 0);
    xor_ln235_fu_267_p2 <= (icmp_ln237_fu_261_p2 xor ap_const_lv1_1);
    zext_ln237_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln237_fu_439_p3),14));
    zext_ln237_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_69_fu_498_p2),14));
    zext_ln241_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(current_dim_mid2_fu_462_p3),9));
    zext_ln243_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_530_p3),14));
    zext_ln243_2_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_1_fu_554_p2),64));
    zext_ln243_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_2_fu_643_p3),64));
end behav;
