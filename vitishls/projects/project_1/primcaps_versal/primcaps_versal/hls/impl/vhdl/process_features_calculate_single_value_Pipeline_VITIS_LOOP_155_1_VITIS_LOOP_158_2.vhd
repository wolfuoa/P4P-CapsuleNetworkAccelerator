-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_features_calculate_single_value_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_158_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_i_i341_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_11_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_12_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_13_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_14_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_15_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_16_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_17_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_18_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_19_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_20_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_21_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_22_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_23_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_24_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_25_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_26_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_27_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_28_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_29_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_30_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_31_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_32_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_33_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_34_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_35_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_36_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_37_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_38_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_39_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_40_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_41_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_42_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_43_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_44_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_45_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_46_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_47_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_48_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_49_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_50_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_51_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_52_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_53_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_54_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_55_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_56_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_57_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_58_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_59_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_60_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_61_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_62_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_63_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_64_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_65_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_66_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_67_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_68_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_69_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_70_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_71_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_72_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_73_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_74_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_75_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_76_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_77_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_78_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln140_79_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    result_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of process_features_calculate_single_value_Pipeline_VITIS_LOOP_155_1_VITIS_LOOP_158_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln155_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal result_1_fu_364 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal result_fu_1495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_368 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln158_fu_1501_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_372 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln155_fu_1127_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_376 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln155_fu_1080_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln158_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln155_1_fu_1121_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_1139_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln158_fu_1135_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln154_fu_1113_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln158_1_fu_1153_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln158_1_fu_1147_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p163 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1163_p164 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_1163_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p5 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p7 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p9 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p11 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p13 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p15 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p17 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p19 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p21 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p23 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p25 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p27 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p29 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p31 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p33 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p35 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p37 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p39 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p41 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p43 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p45 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p47 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p49 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p51 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p53 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p55 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p57 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p59 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p61 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p63 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p65 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p67 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p69 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p71 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p73 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p75 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p77 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p79 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p81 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p83 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p85 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p87 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p89 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p91 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p93 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p95 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p97 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p99 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p101 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p103 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p105 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p107 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p109 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p111 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p113 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p115 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p117 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p119 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p121 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p123 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p125 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p127 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p129 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p131 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p133 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p135 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p137 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p139 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p141 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p143 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p145 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p147 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p149 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p151 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p153 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p155 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p157 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p159 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_1163_p161 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component process_features_sparsemux_163_7_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (6 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (6 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (6 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (6 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (6 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (6 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (6 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (6 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (6 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (6 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (6 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (6 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (6 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (6 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (6 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (6 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (6 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (6 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (6 downto 0);
        din18_WIDTH : INTEGER;
        CASE19 : STD_LOGIC_VECTOR (6 downto 0);
        din19_WIDTH : INTEGER;
        CASE20 : STD_LOGIC_VECTOR (6 downto 0);
        din20_WIDTH : INTEGER;
        CASE21 : STD_LOGIC_VECTOR (6 downto 0);
        din21_WIDTH : INTEGER;
        CASE22 : STD_LOGIC_VECTOR (6 downto 0);
        din22_WIDTH : INTEGER;
        CASE23 : STD_LOGIC_VECTOR (6 downto 0);
        din23_WIDTH : INTEGER;
        CASE24 : STD_LOGIC_VECTOR (6 downto 0);
        din24_WIDTH : INTEGER;
        CASE25 : STD_LOGIC_VECTOR (6 downto 0);
        din25_WIDTH : INTEGER;
        CASE26 : STD_LOGIC_VECTOR (6 downto 0);
        din26_WIDTH : INTEGER;
        CASE27 : STD_LOGIC_VECTOR (6 downto 0);
        din27_WIDTH : INTEGER;
        CASE28 : STD_LOGIC_VECTOR (6 downto 0);
        din28_WIDTH : INTEGER;
        CASE29 : STD_LOGIC_VECTOR (6 downto 0);
        din29_WIDTH : INTEGER;
        CASE30 : STD_LOGIC_VECTOR (6 downto 0);
        din30_WIDTH : INTEGER;
        CASE31 : STD_LOGIC_VECTOR (6 downto 0);
        din31_WIDTH : INTEGER;
        CASE32 : STD_LOGIC_VECTOR (6 downto 0);
        din32_WIDTH : INTEGER;
        CASE33 : STD_LOGIC_VECTOR (6 downto 0);
        din33_WIDTH : INTEGER;
        CASE34 : STD_LOGIC_VECTOR (6 downto 0);
        din34_WIDTH : INTEGER;
        CASE35 : STD_LOGIC_VECTOR (6 downto 0);
        din35_WIDTH : INTEGER;
        CASE36 : STD_LOGIC_VECTOR (6 downto 0);
        din36_WIDTH : INTEGER;
        CASE37 : STD_LOGIC_VECTOR (6 downto 0);
        din37_WIDTH : INTEGER;
        CASE38 : STD_LOGIC_VECTOR (6 downto 0);
        din38_WIDTH : INTEGER;
        CASE39 : STD_LOGIC_VECTOR (6 downto 0);
        din39_WIDTH : INTEGER;
        CASE40 : STD_LOGIC_VECTOR (6 downto 0);
        din40_WIDTH : INTEGER;
        CASE41 : STD_LOGIC_VECTOR (6 downto 0);
        din41_WIDTH : INTEGER;
        CASE42 : STD_LOGIC_VECTOR (6 downto 0);
        din42_WIDTH : INTEGER;
        CASE43 : STD_LOGIC_VECTOR (6 downto 0);
        din43_WIDTH : INTEGER;
        CASE44 : STD_LOGIC_VECTOR (6 downto 0);
        din44_WIDTH : INTEGER;
        CASE45 : STD_LOGIC_VECTOR (6 downto 0);
        din45_WIDTH : INTEGER;
        CASE46 : STD_LOGIC_VECTOR (6 downto 0);
        din46_WIDTH : INTEGER;
        CASE47 : STD_LOGIC_VECTOR (6 downto 0);
        din47_WIDTH : INTEGER;
        CASE48 : STD_LOGIC_VECTOR (6 downto 0);
        din48_WIDTH : INTEGER;
        CASE49 : STD_LOGIC_VECTOR (6 downto 0);
        din49_WIDTH : INTEGER;
        CASE50 : STD_LOGIC_VECTOR (6 downto 0);
        din50_WIDTH : INTEGER;
        CASE51 : STD_LOGIC_VECTOR (6 downto 0);
        din51_WIDTH : INTEGER;
        CASE52 : STD_LOGIC_VECTOR (6 downto 0);
        din52_WIDTH : INTEGER;
        CASE53 : STD_LOGIC_VECTOR (6 downto 0);
        din53_WIDTH : INTEGER;
        CASE54 : STD_LOGIC_VECTOR (6 downto 0);
        din54_WIDTH : INTEGER;
        CASE55 : STD_LOGIC_VECTOR (6 downto 0);
        din55_WIDTH : INTEGER;
        CASE56 : STD_LOGIC_VECTOR (6 downto 0);
        din56_WIDTH : INTEGER;
        CASE57 : STD_LOGIC_VECTOR (6 downto 0);
        din57_WIDTH : INTEGER;
        CASE58 : STD_LOGIC_VECTOR (6 downto 0);
        din58_WIDTH : INTEGER;
        CASE59 : STD_LOGIC_VECTOR (6 downto 0);
        din59_WIDTH : INTEGER;
        CASE60 : STD_LOGIC_VECTOR (6 downto 0);
        din60_WIDTH : INTEGER;
        CASE61 : STD_LOGIC_VECTOR (6 downto 0);
        din61_WIDTH : INTEGER;
        CASE62 : STD_LOGIC_VECTOR (6 downto 0);
        din62_WIDTH : INTEGER;
        CASE63 : STD_LOGIC_VECTOR (6 downto 0);
        din63_WIDTH : INTEGER;
        CASE64 : STD_LOGIC_VECTOR (6 downto 0);
        din64_WIDTH : INTEGER;
        CASE65 : STD_LOGIC_VECTOR (6 downto 0);
        din65_WIDTH : INTEGER;
        CASE66 : STD_LOGIC_VECTOR (6 downto 0);
        din66_WIDTH : INTEGER;
        CASE67 : STD_LOGIC_VECTOR (6 downto 0);
        din67_WIDTH : INTEGER;
        CASE68 : STD_LOGIC_VECTOR (6 downto 0);
        din68_WIDTH : INTEGER;
        CASE69 : STD_LOGIC_VECTOR (6 downto 0);
        din69_WIDTH : INTEGER;
        CASE70 : STD_LOGIC_VECTOR (6 downto 0);
        din70_WIDTH : INTEGER;
        CASE71 : STD_LOGIC_VECTOR (6 downto 0);
        din71_WIDTH : INTEGER;
        CASE72 : STD_LOGIC_VECTOR (6 downto 0);
        din72_WIDTH : INTEGER;
        CASE73 : STD_LOGIC_VECTOR (6 downto 0);
        din73_WIDTH : INTEGER;
        CASE74 : STD_LOGIC_VECTOR (6 downto 0);
        din74_WIDTH : INTEGER;
        CASE75 : STD_LOGIC_VECTOR (6 downto 0);
        din75_WIDTH : INTEGER;
        CASE76 : STD_LOGIC_VECTOR (6 downto 0);
        din76_WIDTH : INTEGER;
        CASE77 : STD_LOGIC_VECTOR (6 downto 0);
        din77_WIDTH : INTEGER;
        CASE78 : STD_LOGIC_VECTOR (6 downto 0);
        din78_WIDTH : INTEGER;
        CASE79 : STD_LOGIC_VECTOR (6 downto 0);
        din79_WIDTH : INTEGER;
        CASE80 : STD_LOGIC_VECTOR (6 downto 0);
        din80_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (31 downto 0);
        din61 : IN STD_LOGIC_VECTOR (31 downto 0);
        din62 : IN STD_LOGIC_VECTOR (31 downto 0);
        din63 : IN STD_LOGIC_VECTOR (31 downto 0);
        din64 : IN STD_LOGIC_VECTOR (31 downto 0);
        din65 : IN STD_LOGIC_VECTOR (31 downto 0);
        din66 : IN STD_LOGIC_VECTOR (31 downto 0);
        din67 : IN STD_LOGIC_VECTOR (31 downto 0);
        din68 : IN STD_LOGIC_VECTOR (31 downto 0);
        din69 : IN STD_LOGIC_VECTOR (31 downto 0);
        din70 : IN STD_LOGIC_VECTOR (31 downto 0);
        din71 : IN STD_LOGIC_VECTOR (31 downto 0);
        din72 : IN STD_LOGIC_VECTOR (31 downto 0);
        din73 : IN STD_LOGIC_VECTOR (31 downto 0);
        din74 : IN STD_LOGIC_VECTOR (31 downto 0);
        din75 : IN STD_LOGIC_VECTOR (31 downto 0);
        din76 : IN STD_LOGIC_VECTOR (31 downto 0);
        din77 : IN STD_LOGIC_VECTOR (31 downto 0);
        din78 : IN STD_LOGIC_VECTOR (31 downto 0);
        din79 : IN STD_LOGIC_VECTOR (31 downto 0);
        din80 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_features_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_163_7_32_1_1_U508 : component process_features_sparsemux_163_7_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000000",
        din0_WIDTH => 32,
        CASE1 => "0000001",
        din1_WIDTH => 32,
        CASE2 => "0000010",
        din2_WIDTH => 32,
        CASE3 => "0000011",
        din3_WIDTH => 32,
        CASE4 => "0000100",
        din4_WIDTH => 32,
        CASE5 => "0000101",
        din5_WIDTH => 32,
        CASE6 => "0000110",
        din6_WIDTH => 32,
        CASE7 => "0000111",
        din7_WIDTH => 32,
        CASE8 => "0001000",
        din8_WIDTH => 32,
        CASE9 => "0001001",
        din9_WIDTH => 32,
        CASE10 => "0001010",
        din10_WIDTH => 32,
        CASE11 => "0001011",
        din11_WIDTH => 32,
        CASE12 => "0001100",
        din12_WIDTH => 32,
        CASE13 => "0001101",
        din13_WIDTH => 32,
        CASE14 => "0001110",
        din14_WIDTH => 32,
        CASE15 => "0001111",
        din15_WIDTH => 32,
        CASE16 => "0010000",
        din16_WIDTH => 32,
        CASE17 => "0010001",
        din17_WIDTH => 32,
        CASE18 => "0010010",
        din18_WIDTH => 32,
        CASE19 => "0010011",
        din19_WIDTH => 32,
        CASE20 => "0010100",
        din20_WIDTH => 32,
        CASE21 => "0010101",
        din21_WIDTH => 32,
        CASE22 => "0010110",
        din22_WIDTH => 32,
        CASE23 => "0010111",
        din23_WIDTH => 32,
        CASE24 => "0011000",
        din24_WIDTH => 32,
        CASE25 => "0011001",
        din25_WIDTH => 32,
        CASE26 => "0011010",
        din26_WIDTH => 32,
        CASE27 => "0011011",
        din27_WIDTH => 32,
        CASE28 => "0011100",
        din28_WIDTH => 32,
        CASE29 => "0011101",
        din29_WIDTH => 32,
        CASE30 => "0011110",
        din30_WIDTH => 32,
        CASE31 => "0011111",
        din31_WIDTH => 32,
        CASE32 => "0100000",
        din32_WIDTH => 32,
        CASE33 => "0100001",
        din33_WIDTH => 32,
        CASE34 => "0100010",
        din34_WIDTH => 32,
        CASE35 => "0100011",
        din35_WIDTH => 32,
        CASE36 => "0100100",
        din36_WIDTH => 32,
        CASE37 => "0100101",
        din37_WIDTH => 32,
        CASE38 => "0100110",
        din38_WIDTH => 32,
        CASE39 => "0100111",
        din39_WIDTH => 32,
        CASE40 => "0101000",
        din40_WIDTH => 32,
        CASE41 => "0101001",
        din41_WIDTH => 32,
        CASE42 => "0101010",
        din42_WIDTH => 32,
        CASE43 => "0101011",
        din43_WIDTH => 32,
        CASE44 => "0101100",
        din44_WIDTH => 32,
        CASE45 => "0101101",
        din45_WIDTH => 32,
        CASE46 => "0101110",
        din46_WIDTH => 32,
        CASE47 => "0101111",
        din47_WIDTH => 32,
        CASE48 => "0110000",
        din48_WIDTH => 32,
        CASE49 => "0110001",
        din49_WIDTH => 32,
        CASE50 => "0110010",
        din50_WIDTH => 32,
        CASE51 => "0110011",
        din51_WIDTH => 32,
        CASE52 => "0110100",
        din52_WIDTH => 32,
        CASE53 => "0110101",
        din53_WIDTH => 32,
        CASE54 => "0110110",
        din54_WIDTH => 32,
        CASE55 => "0110111",
        din55_WIDTH => 32,
        CASE56 => "0111000",
        din56_WIDTH => 32,
        CASE57 => "0111001",
        din57_WIDTH => 32,
        CASE58 => "0111010",
        din58_WIDTH => 32,
        CASE59 => "0111011",
        din59_WIDTH => 32,
        CASE60 => "0111100",
        din60_WIDTH => 32,
        CASE61 => "0111101",
        din61_WIDTH => 32,
        CASE62 => "0111110",
        din62_WIDTH => 32,
        CASE63 => "0111111",
        din63_WIDTH => 32,
        CASE64 => "1000000",
        din64_WIDTH => 32,
        CASE65 => "1000001",
        din65_WIDTH => 32,
        CASE66 => "1000010",
        din66_WIDTH => 32,
        CASE67 => "1000011",
        din67_WIDTH => 32,
        CASE68 => "1000100",
        din68_WIDTH => 32,
        CASE69 => "1000101",
        din69_WIDTH => 32,
        CASE70 => "1000110",
        din70_WIDTH => 32,
        CASE71 => "1000111",
        din71_WIDTH => 32,
        CASE72 => "1001000",
        din72_WIDTH => 32,
        CASE73 => "1001001",
        din73_WIDTH => 32,
        CASE74 => "1001010",
        din74_WIDTH => 32,
        CASE75 => "1001011",
        din75_WIDTH => 32,
        CASE76 => "1001100",
        din76_WIDTH => 32,
        CASE77 => "1001101",
        din77_WIDTH => 32,
        CASE78 => "1001110",
        din78_WIDTH => 32,
        CASE79 => "1001111",
        din79_WIDTH => 32,
        CASE80 => "1010000",
        din80_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        din0 => conv_i_i341_reload,
        din1 => phi_ln140_reload,
        din2 => phi_ln140_1_reload,
        din3 => phi_ln140_2_reload,
        din4 => phi_ln140_3_reload,
        din5 => phi_ln140_4_reload,
        din6 => phi_ln140_5_reload,
        din7 => phi_ln140_6_reload,
        din8 => phi_ln140_7_reload,
        din9 => phi_ln140_8_reload,
        din10 => phi_ln140_9_reload,
        din11 => phi_ln140_10_reload,
        din12 => phi_ln140_11_reload,
        din13 => phi_ln140_12_reload,
        din14 => phi_ln140_13_reload,
        din15 => phi_ln140_14_reload,
        din16 => phi_ln140_15_reload,
        din17 => phi_ln140_16_reload,
        din18 => phi_ln140_17_reload,
        din19 => phi_ln140_18_reload,
        din20 => phi_ln140_19_reload,
        din21 => phi_ln140_20_reload,
        din22 => phi_ln140_21_reload,
        din23 => phi_ln140_22_reload,
        din24 => phi_ln140_23_reload,
        din25 => phi_ln140_24_reload,
        din26 => phi_ln140_25_reload,
        din27 => phi_ln140_26_reload,
        din28 => phi_ln140_27_reload,
        din29 => phi_ln140_28_reload,
        din30 => phi_ln140_29_reload,
        din31 => phi_ln140_30_reload,
        din32 => phi_ln140_31_reload,
        din33 => phi_ln140_32_reload,
        din34 => phi_ln140_33_reload,
        din35 => phi_ln140_34_reload,
        din36 => phi_ln140_35_reload,
        din37 => phi_ln140_36_reload,
        din38 => phi_ln140_37_reload,
        din39 => phi_ln140_38_reload,
        din40 => phi_ln140_39_reload,
        din41 => phi_ln140_40_reload,
        din42 => phi_ln140_41_reload,
        din43 => phi_ln140_42_reload,
        din44 => phi_ln140_43_reload,
        din45 => phi_ln140_44_reload,
        din46 => phi_ln140_45_reload,
        din47 => phi_ln140_46_reload,
        din48 => phi_ln140_47_reload,
        din49 => phi_ln140_48_reload,
        din50 => phi_ln140_49_reload,
        din51 => phi_ln140_50_reload,
        din52 => phi_ln140_51_reload,
        din53 => phi_ln140_52_reload,
        din54 => phi_ln140_53_reload,
        din55 => phi_ln140_54_reload,
        din56 => phi_ln140_55_reload,
        din57 => phi_ln140_56_reload,
        din58 => phi_ln140_57_reload,
        din59 => phi_ln140_58_reload,
        din60 => phi_ln140_59_reload,
        din61 => phi_ln140_60_reload,
        din62 => phi_ln140_61_reload,
        din63 => phi_ln140_62_reload,
        din64 => phi_ln140_63_reload,
        din65 => phi_ln140_64_reload,
        din66 => phi_ln140_65_reload,
        din67 => phi_ln140_66_reload,
        din68 => phi_ln140_67_reload,
        din69 => phi_ln140_68_reload,
        din70 => phi_ln140_69_reload,
        din71 => phi_ln140_70_reload,
        din72 => phi_ln140_71_reload,
        din73 => phi_ln140_72_reload,
        din74 => phi_ln140_73_reload,
        din75 => phi_ln140_74_reload,
        din76 => phi_ln140_75_reload,
        din77 => phi_ln140_76_reload,
        din78 => phi_ln140_77_reload,
        din79 => phi_ln140_78_reload,
        din80 => phi_ln140_79_reload,
        def => tmp_fu_1163_p163,
        sel => tmp_fu_1163_p164,
        dout => tmp_fu_1163_p165);

    flow_control_loop_pipe_sequential_init_U : component process_features_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln155_fu_1086_p2 = ap_const_lv1_0)) then 
                    i_fu_372 <= select_ln155_fu_1127_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_372 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln155_fu_1086_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_376 <= add_ln155_fu_1080_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_376 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln155_fu_1086_p2 = ap_const_lv1_0)) then 
                    j_fu_368 <= add_ln158_fu_1501_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_368 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln155_fu_1086_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                result_1_fu_364 <= result_fu_1495_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln155_1_fu_1121_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln155_fu_1080_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln158_1_fu_1147_p2 <= std_logic_vector(unsigned(p_shl_fu_1139_p3) + unsigned(zext_ln158_fu_1135_p1));
    add_ln158_fu_1501_p2 <= std_logic_vector(unsigned(select_ln154_fu_1113_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln155_fu_1086_p2)
    begin
        if (((icmp_ln155_fu_1086_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_372)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_372;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_376)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_376;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, j_fu_368, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_368;
        end if; 
    end process;

    icmp_ln155_fu_1086_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_51) else "0";
    icmp_ln158_fu_1107_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_9) else "0";
    p_shl_fu_1139_p3 <= (select_ln155_fu_1127_p3 & ap_const_lv3_0);
    result_1_out <= result_1_fu_364;

    result_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln155_fu_1086_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln155_fu_1086_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_1_out_ap_vld <= ap_const_logic_1;
        else 
            result_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_fu_1495_p2 <= std_logic_vector(unsigned(tmp_fu_1163_p165) + unsigned(result_1_fu_364));
    select_ln154_fu_1113_p3 <= 
        ap_const_lv4_0 when (icmp_ln158_fu_1107_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln155_fu_1127_p3 <= 
        add_ln155_1_fu_1121_p2 when (icmp_ln158_fu_1107_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    tmp_fu_1163_p163 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_1163_p164 <= std_logic_vector(unsigned(zext_ln158_1_fu_1153_p1) + unsigned(add_ln158_1_fu_1147_p2));
    zext_ln158_1_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln154_fu_1113_p3),7));
    zext_ln158_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln155_fu_1127_p3),7));
end behav;
