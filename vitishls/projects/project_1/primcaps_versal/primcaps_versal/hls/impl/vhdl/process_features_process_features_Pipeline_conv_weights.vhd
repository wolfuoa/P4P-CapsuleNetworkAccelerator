-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_features_process_features_Pipeline_conv_weights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_stream_empty_n : IN STD_LOGIC;
    weights_stream_read : OUT STD_LOGIC;
    weight_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_buffer_ce0 : OUT STD_LOGIC;
    weight_buffer_we0 : OUT STD_LOGIC_VECTOR (323 downto 0);
    weight_buffer_d0 : OUT STD_LOGIC_VECTOR (2591 downto 0) );
end;


architecture behav of process_features_process_features_Pipeline_conv_weights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv324_lc_1 : STD_LOGIC_VECTOR (323 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_5100 : STD_LOGIC_VECTOR (14 downto 0) := "101000100000000";
    constant ap_const_lv15_51 : STD_LOGIC_VECTOR (14 downto 0) := "000000001010001";
    constant ap_const_lv31_CA46 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001100101001000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv324_lc_3 : STD_LOGIC_VECTOR (323 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln104_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal weights_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln104_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_70 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal select_ln106_fu_190_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul_fu_74 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln104_1_fu_198_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln104_fu_142_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (14 downto 0);
    signal weights_stream_read_local : STD_LOGIC;
    signal weight_buffer_ce0_local : STD_LOGIC;
    signal weight_buffer_we0_local : STD_LOGIC_VECTOR (323 downto 0);
    signal shl_ln107_fu_241_p2 : STD_LOGIC_VECTOR (2591 downto 0);
    signal shl_ln107_1_fu_260_p2 : STD_LOGIC_VECTOR (323 downto 0);
    signal add_ln106_fu_178_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln106_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_204_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln107_fu_221_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_225_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln107_1_fu_237_p1 : STD_LOGIC_VECTOR (2591 downto 0);
    signal zext_ln107_fu_233_p1 : STD_LOGIC_VECTOR (2591 downto 0);
    signal tmp_14_fu_248_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln107_2_fu_256_p1 : STD_LOGIC_VECTOR (323 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component process_features_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component process_features_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln104_fu_148_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_78 <= add_ln104_fu_142_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_78 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_74 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_mul_fu_74 <= add_ln104_1_fu_198_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_70 <= ap_const_lv15_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_urem_fu_70 <= select_ln106_fu_190_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln104_1_fu_198_p2 <= std_logic_vector(unsigned(phi_mul_fu_74) + unsigned(ap_const_lv31_CA46));
    add_ln104_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv15_1));
    add_ln106_fu_178_p2 <= std_logic_vector(unsigned(phi_urem_fu_70) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(weights_stream_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (weights_stream_empty_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln104_fu_148_p2)
    begin
        if (((icmp_ln104_fu_148_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_78)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_78;
        end if; 
    end process;

    icmp_ln104_fu_148_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv15_5100) else "0";
    icmp_ln106_fu_184_p2 <= "1" when (unsigned(add_ln106_fu_178_p2) < unsigned(ap_const_lv15_51)) else "0";
    select_ln106_fu_190_p3 <= 
        add_ln106_fu_178_p2 when (icmp_ln106_fu_184_p2(0) = '1') else 
        ap_const_lv15_0;
    shl_ln107_1_fu_260_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv324_lc_3),to_integer(unsigned('0' & zext_ln107_2_fu_256_p1(31-1 downto 0)))));
    shl_ln107_fu_241_p2 <= std_logic_vector(shift_left(unsigned(zext_ln107_1_fu_237_p1),to_integer(unsigned('0' & zext_ln107_fu_233_p1(31-1 downto 0)))));
    shl_ln_fu_225_p3 <= (trunc_ln107_fu_221_p1 & ap_const_lv5_0);
    tmp_14_fu_248_p3 <= (trunc_ln107_fu_221_p1 & ap_const_lv2_0);
    tmp_fu_204_p4 <= phi_mul_fu_74(30 downto 22);
    trunc_ln107_fu_221_p1 <= phi_urem_fu_70(7 - 1 downto 0);
    weight_buffer_address0 <= zext_ln104_fu_214_p1(8 - 1 downto 0);
    weight_buffer_ce0 <= weight_buffer_ce0_local;

    weight_buffer_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_buffer_ce0_local <= ap_const_logic_1;
        else 
            weight_buffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_d0 <= shl_ln107_fu_241_p2;
    weight_buffer_we0 <= weight_buffer_we0_local;

    weight_buffer_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, shl_ln107_1_fu_260_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_buffer_we0_local <= shl_ln107_1_fu_260_p2;
        else 
            weight_buffer_we0_local <= ap_const_lv324_lc_1;
        end if; 
    end process;


    weights_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, weights_stream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_stream_blk_n <= weights_stream_empty_n;
        else 
            weights_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    weights_stream_read <= weights_stream_read_local;

    weights_stream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_stream_read_local <= ap_const_logic_1;
        else 
            weights_stream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_204_p4),64));
    zext_ln107_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_stream_dout),2592));
    zext_ln107_2_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_248_p3),324));
    zext_ln107_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_225_p3),2592));
end behav;
