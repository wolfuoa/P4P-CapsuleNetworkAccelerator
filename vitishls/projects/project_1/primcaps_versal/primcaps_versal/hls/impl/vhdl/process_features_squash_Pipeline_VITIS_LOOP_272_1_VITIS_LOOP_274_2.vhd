-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_features_squash_Pipeline_VITIS_LOOP_272_1_VITIS_LOOP_274_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    squared_input_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_3_ce0 : OUT STD_LOGIC;
    squared_input_3_we0 : OUT STD_LOGIC;
    squared_input_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    squared_input_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_2_ce0 : OUT STD_LOGIC;
    squared_input_2_we0 : OUT STD_LOGIC;
    squared_input_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    squared_input_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_1_ce0 : OUT STD_LOGIC;
    squared_input_1_we0 : OUT STD_LOGIC;
    squared_input_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    squared_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_ce0 : OUT STD_LOGIC;
    squared_input_we0 : OUT STD_LOGIC;
    squared_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_ce0 : OUT STD_LOGIC;
    input_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_buffer_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_1_ce0 : OUT STD_LOGIC;
    input_buffer_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_buffer_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_2_ce0 : OUT STD_LOGIC;
    input_buffer_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_buffer_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buffer_3_ce0 : OUT STD_LOGIC;
    input_buffer_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of process_features_squash_Pipeline_VITIS_LOOP_272_1_VITIS_LOOP_274_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln272_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln274_fu_289_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln274_reg_471 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln274_reg_471_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln274_reg_471_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal squared_input_addr_reg_496 : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_addr_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_addr_reg_496_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_1_addr_reg_502 : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_1_addr_reg_502_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_1_addr_reg_502_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_2_addr_reg_508 : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_2_addr_reg_508_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_2_addr_reg_508_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_3_addr_reg_514 : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_3_addr_reg_514_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal squared_input_3_addr_reg_514_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_379_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln276_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grid_cols_fu_76 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln274_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_grid_cols_load : STD_LOGIC_VECTOR (3 downto 0);
    signal grid_rows_fu_80 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal select_ln272_1_fu_281_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_grid_rows_load : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln272_fu_237_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal input_buffer_ce0_local : STD_LOGIC;
    signal input_buffer_1_ce0_local : STD_LOGIC;
    signal input_buffer_2_ce0_local : STD_LOGIC;
    signal input_buffer_3_ce0_local : STD_LOGIC;
    signal squared_input_2_we0_local : STD_LOGIC;
    signal squared_input_2_ce0_local : STD_LOGIC;
    signal squared_input_1_we0_local : STD_LOGIC;
    signal squared_input_1_ce0_local : STD_LOGIC;
    signal squared_input_we0_local : STD_LOGIC;
    signal squared_input_ce0_local : STD_LOGIC;
    signal squared_input_3_we0_local : STD_LOGIC;
    signal squared_input_3_ce0_local : STD_LOGIC;
    signal mul_ln276_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln276_fu_402_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln276_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln274_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln272_1_fu_275_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln272_fu_267_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln_fu_301_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_379_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln276_fu_188_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_379_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_379_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_379_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_379_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component process_features_mul_32s_32s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component process_features_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_features_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_48_1_1_U641 : component process_features_mul_32s_32s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln276_fu_188_p0,
        din1 => mul_ln276_fu_188_p1,
        dout => mul_ln276_fu_188_p2);

    sparsemux_9_2_32_1_1_U642 : component process_features_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => input_buffer_q0,
        din1 => input_buffer_1_q0,
        din2 => input_buffer_2_q0,
        din3 => input_buffer_3_q0,
        def => tmp_fu_379_p9,
        sel => trunc_ln274_reg_471,
        dout => tmp_fu_379_p11);

    flow_control_loop_pipe_sequential_init_U : component process_features_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    grid_cols_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln272_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grid_cols_fu_76 <= add_ln274_fu_337_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    grid_cols_fu_76 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    grid_rows_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln272_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grid_rows_fu_80 <= select_ln272_1_fu_281_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    grid_rows_fu_80 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln272_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_84 <= add_ln272_fu_237_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                squared_input_1_addr_reg_502 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
                squared_input_1_addr_reg_502_pp0_iter1_reg <= squared_input_1_addr_reg_502;
                squared_input_2_addr_reg_508 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
                squared_input_2_addr_reg_508_pp0_iter1_reg <= squared_input_2_addr_reg_508;
                squared_input_3_addr_reg_514 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
                squared_input_3_addr_reg_514_pp0_iter1_reg <= squared_input_3_addr_reg_514;
                squared_input_addr_reg_496 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
                squared_input_addr_reg_496_pp0_iter1_reg <= squared_input_addr_reg_496;
                tmp_reg_520 <= tmp_fu_379_p11;
                trunc_ln274_reg_471 <= trunc_ln274_fu_289_p1;
                trunc_ln274_reg_471_pp0_iter1_reg <= trunc_ln274_reg_471;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                squared_input_1_addr_reg_502_pp0_iter2_reg <= squared_input_1_addr_reg_502_pp0_iter1_reg;
                squared_input_2_addr_reg_508_pp0_iter2_reg <= squared_input_2_addr_reg_508_pp0_iter1_reg;
                squared_input_3_addr_reg_514_pp0_iter2_reg <= squared_input_3_addr_reg_514_pp0_iter1_reg;
                squared_input_addr_reg_496_pp0_iter2_reg <= squared_input_addr_reg_496_pp0_iter1_reg;
                trunc_ln274_reg_471_pp0_iter2_reg <= trunc_ln274_reg_471_pp0_iter1_reg;
                trunc_ln_reg_525 <= mul_ln276_fu_188_p2(47 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln272_1_fu_275_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_grid_rows_load) + unsigned(ap_const_lv11_1));
    add_ln272_fu_237_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln274_fu_337_p2 <= std_logic_vector(unsigned(select_ln272_fu_267_p3) + unsigned(ap_const_lv4_1));
    add_ln_fu_301_p3 <= (select_ln272_1_fu_281_p3 & tmp_13_fu_293_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln272_fu_243_p2)
    begin
        if (((icmp_ln272_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_grid_cols_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grid_cols_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_grid_cols_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_grid_cols_load <= grid_cols_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_grid_rows_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, grid_rows_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_grid_rows_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_grid_rows_load <= grid_rows_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_84;
        end if; 
    end process;

    icmp_ln272_fu_243_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_2400) else "0";
    icmp_ln274_fu_261_p2 <= "1" when (ap_sig_allocacmp_grid_cols_load = ap_const_lv4_8) else "0";
    input_buffer_1_address0 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
    input_buffer_1_ce0 <= input_buffer_1_ce0_local;

    input_buffer_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buffer_1_ce0_local <= ap_const_logic_1;
        else 
            input_buffer_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_2_address0 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
    input_buffer_2_ce0 <= input_buffer_2_ce0_local;

    input_buffer_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buffer_2_ce0_local <= ap_const_logic_1;
        else 
            input_buffer_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_3_address0 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
    input_buffer_3_ce0 <= input_buffer_3_ce0_local;

    input_buffer_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buffer_3_ce0_local <= ap_const_logic_1;
        else 
            input_buffer_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buffer_address0 <= zext_ln276_fu_309_p1(12 - 1 downto 0);
    input_buffer_ce0 <= input_buffer_ce0_local;

    input_buffer_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_buffer_ce0_local <= ap_const_logic_1;
        else 
            input_buffer_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln276_fu_188_p0 <= sext_ln276_fu_402_p1(32 - 1 downto 0);
    mul_ln276_fu_188_p1 <= sext_ln276_fu_402_p1(32 - 1 downto 0);
    select_ln272_1_fu_281_p3 <= 
        add_ln272_1_fu_275_p2 when (icmp_ln274_fu_261_p2(0) = '1') else 
        ap_sig_allocacmp_grid_rows_load;
    select_ln272_fu_267_p3 <= 
        ap_const_lv4_0 when (icmp_ln274_fu_261_p2(0) = '1') else 
        ap_sig_allocacmp_grid_cols_load;
        sext_ln276_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_520),48));

    squared_input_1_address0 <= squared_input_1_addr_reg_502_pp0_iter2_reg;
    squared_input_1_ce0 <= squared_input_1_ce0_local;

    squared_input_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            squared_input_1_ce0_local <= ap_const_logic_1;
        else 
            squared_input_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_1_d0 <= trunc_ln_reg_525;
    squared_input_1_we0 <= squared_input_1_we0_local;

    squared_input_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln274_reg_471_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln274_reg_471_pp0_iter2_reg = ap_const_lv2_1))) then 
            squared_input_1_we0_local <= ap_const_logic_1;
        else 
            squared_input_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_2_address0 <= squared_input_2_addr_reg_508_pp0_iter2_reg;
    squared_input_2_ce0 <= squared_input_2_ce0_local;

    squared_input_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            squared_input_2_ce0_local <= ap_const_logic_1;
        else 
            squared_input_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_2_d0 <= trunc_ln_reg_525;
    squared_input_2_we0 <= squared_input_2_we0_local;

    squared_input_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln274_reg_471_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln274_reg_471_pp0_iter2_reg = ap_const_lv2_2))) then 
            squared_input_2_we0_local <= ap_const_logic_1;
        else 
            squared_input_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_3_address0 <= squared_input_3_addr_reg_514_pp0_iter2_reg;
    squared_input_3_ce0 <= squared_input_3_ce0_local;

    squared_input_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            squared_input_3_ce0_local <= ap_const_logic_1;
        else 
            squared_input_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_3_d0 <= trunc_ln_reg_525;
    squared_input_3_we0 <= squared_input_3_we0_local;

    squared_input_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln274_reg_471_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln274_reg_471_pp0_iter2_reg = ap_const_lv2_3))) then 
            squared_input_3_we0_local <= ap_const_logic_1;
        else 
            squared_input_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_address0 <= squared_input_addr_reg_496_pp0_iter2_reg;
    squared_input_ce0 <= squared_input_ce0_local;

    squared_input_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            squared_input_ce0_local <= ap_const_logic_1;
        else 
            squared_input_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_d0 <= trunc_ln_reg_525;
    squared_input_we0 <= squared_input_we0_local;

    squared_input_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln274_reg_471_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln274_reg_471_pp0_iter2_reg = ap_const_lv2_0))) then 
            squared_input_we0_local <= ap_const_logic_1;
        else 
            squared_input_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_293_p3 <= select_ln272_fu_267_p3(2 downto 2);
    tmp_fu_379_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln274_fu_289_p1 <= select_ln272_fu_267_p3(2 - 1 downto 0);
    zext_ln276_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_301_p3),64));
end behav;
