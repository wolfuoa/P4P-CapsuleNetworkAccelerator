-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_features_squash_Pipeline_VITIS_LOOP_282_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    squared_norm_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    squared_norm_ce0 : OUT STD_LOGIC;
    squared_norm_we0 : OUT STD_LOGIC;
    squared_norm_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    squared_norm_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    squared_norm_ce1 : OUT STD_LOGIC;
    squared_norm_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_ce0 : OUT STD_LOGIC;
    squared_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_ce1 : OUT STD_LOGIC;
    squared_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_1_ce0 : OUT STD_LOGIC;
    squared_input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_1_ce1 : OUT STD_LOGIC;
    squared_input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_2_ce0 : OUT STD_LOGIC;
    squared_input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_2_ce1 : OUT STD_LOGIC;
    squared_input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_3_ce0 : OUT STD_LOGIC;
    squared_input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    squared_input_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    squared_input_3_ce1 : OUT STD_LOGIC;
    squared_input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    scale_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    scale_ce0 : OUT STD_LOGIC;
    scale_we0 : OUT STD_LOGIC;
    scale_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of process_features_squash_Pipeline_VITIS_LOOP_282_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_480 : STD_LOGIC_VECTOR (10 downto 0) := "10010000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv33_10000 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv11_7F0 : STD_LOGIC_VECTOR (10 downto 0) := "11111110000";
    constant ap_const_lv11_10 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_const_lv11_36 : STD_LOGIC_VECTOR (10 downto 0) := "00000110110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter74 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter75 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter76 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter77 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter78 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter79 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter80 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter81 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter82 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter83 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter84 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln282_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln282_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter46_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter47_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter48_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter49_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter50_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter51_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter52_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter53_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter54_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter55_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter56_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter57_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter58_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter59_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter60_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter61_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter62_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter63_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter64_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter65_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter66_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter67_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter68_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter69_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter70_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter71_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter72_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter73_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter74_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter75_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter76_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter77_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter78_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter79_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter80_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter81_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter82_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_reg_1102_pp0_iter83_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal squared_norm_addr_reg_1107 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln286_7_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_7_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1163_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1163_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_1179_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln289_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln289_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln289_1_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln289_1_reg_1190 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln289_1_reg_1195 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal retval_0_i_i_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i_reg_1205_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i_reg_1205_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i_reg_1205_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i_i_reg_1205_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_i_i_4_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast25_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln286_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grid_rows_1_fu_152 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln282_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_grid_rows : STD_LOGIC_VECTOR (10 downto 0);
    signal squared_norm_ce1_local : STD_LOGIC;
    signal squared_norm_we0_local : STD_LOGIC;
    signal squared_norm_ce0_local : STD_LOGIC;
    signal squared_input_ce1_local : STD_LOGIC;
    signal squared_input_ce0_local : STD_LOGIC;
    signal squared_input_1_ce1_local : STD_LOGIC;
    signal squared_input_1_ce0_local : STD_LOGIC;
    signal squared_input_2_ce1_local : STD_LOGIC;
    signal squared_input_2_ce0_local : STD_LOGIC;
    signal squared_input_3_ce1_local : STD_LOGIC;
    signal squared_input_3_ce0_local : STD_LOGIC;
    signal scale_we0_local : STD_LOGIC;
    signal trunc_ln289_9_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal scale_ce0_local : STD_LOGIC;
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_330_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1_fu_366_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln286_1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_4_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_5_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_3_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_6_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_2_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln289_fu_474_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln289_fu_477_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln_fu_487_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_498_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal sub_ln289_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln289_fu_520_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_fu_523_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_533_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln289_3_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_545_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln289_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln289_1_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln289_1_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_573_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln289_2_fu_589_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln289_7_fu_593_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln289_8_fu_599_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lshr_ln289_2_fu_603_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln289_3_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln289_3_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln289_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_2_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln289_2_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln289_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln289_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln289_2_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln289_1_fu_684_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln289_2_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln289_2_fu_700_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln289_3_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln289_fu_688_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln289_fu_704_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal cond49_i_i_in_fu_710_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal or_ln_fu_664_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln289_3_fu_718_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln289_4_fu_722_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln289_3_fu_726_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln289_6_fu_760_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln289_1_fu_753_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln289_4_fu_765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln289_6_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_771_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_fu_778_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln758_fu_794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pf_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln716_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_828_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln289_5_fu_842_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln289_8_cast_fu_846_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln289_10_fu_854_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_10_fu_820_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln289_3_fu_858_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln289_4_fu_816_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln289_5_fu_838_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln289_4_fu_878_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln289_6_fu_884_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln289_5_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln289_5_fu_894_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln289_5_fu_900_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln289_3_fu_906_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln289_2_fu_864_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln289_7_fu_934_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln289_fu_938_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln289_7_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln289_8_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln289_6_fu_948_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_964_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln289_7_fu_924_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln289_9_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln289_8_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln289_1_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln289_4_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_6_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln289_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln289_1_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln289_1_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_1_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_2_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_498_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_1069_p0 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_1069_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter53_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter54_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter55_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter56_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter57_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter58_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter59_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter60_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter61_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter62_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter63_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter64_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter65_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter66_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter67_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter68_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter69_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter70_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter71_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter72_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter73_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter74_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter75_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter76_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter77_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter78_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter79_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter80_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter81_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter82_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter83_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ref_tmp_i_i_4_fu_1034_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal ref_tmp_i_i_4_fu_1034_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component process_features_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component process_features_fsqrt_32ns_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_features_sdiv_49s_33s_49_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component process_features_sparsemux_9_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_features_sdiv_65ns_32s_32_69_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (64 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_features_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fpext_32ns_64_1_no_dsp_1_U652 : component process_features_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_289_p2,
        dout => pf_fu_286_p1);

    fsqrt_32ns_32ns_32_7_no_dsp_1_U653 : component process_features_fsqrt_32ns_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => retval_0_i_i_reg_1205_pp0_iter8_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    sdiv_49s_33s_49_15_1_U654 : component process_features_sdiv_49s_33s_49_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 49,
        din1_WIDTH => 33,
        dout_WIDTH => 49)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_498_p0,
        din1 => add_ln289_fu_477_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p2);

    sparsemux_9_3_32_1_1_U655 : component process_features_sparsemux_9_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 32,
        CASE1 => "010",
        din1_WIDTH => 32,
        CASE2 => "001",
        din2_WIDTH => 32,
        CASE3 => "000",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => trunc_ln289_7_fu_924_p1,
        din2 => ref_tmp_i_i_4_fu_1034_p6,
        din3 => ref_tmp_i_i_4_fu_1034_p8,
        def => ref_tmp_i_i_4_fu_1034_p9,
        sel => ref_tmp_i_i_4_fu_1034_p10,
        dout => ref_tmp_i_i_4_fu_1034_p11);

    sdiv_65ns_32s_32_69_1_U656 : component process_features_sdiv_65ns_32s_32_69_1
    generic map (
        ID => 1,
        NUM_STAGE => 69,
        din0_WIDTH => 65,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1069_p0,
        din1 => ref_tmp_i_i_4_reg_1211,
        ce => ap_const_logic_1,
        dout => grp_fu_1069_p2);

    flow_control_loop_pipe_sequential_init_U : component process_features_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter83_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter74 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter75_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter76_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter76 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter77_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter77 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter78_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter78 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter78 <= ap_enable_reg_pp0_iter77;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter79_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter79 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter79 <= ap_enable_reg_pp0_iter78;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter80_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter80 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter80 <= ap_enable_reg_pp0_iter79;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter81_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter81 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter81 <= ap_enable_reg_pp0_iter80;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter82_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter82 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter82 <= ap_enable_reg_pp0_iter81;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter83_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter83 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter83 <= ap_enable_reg_pp0_iter82;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter84_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter84 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter84 <= ap_enable_reg_pp0_iter83;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grid_rows_1_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln282_fu_319_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grid_rows_1_fu_152 <= add_ln282_fu_313_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    grid_rows_1_fu_152 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln286_7_reg_1154 <= add_ln286_7_fu_452_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                squared_norm_addr_reg_1107 <= zext_ln282_fu_325_p1(11 - 1 downto 0);
                tmp_reg_1163 <= add_ln286_7_fu_452_p2(31 downto 31);
                    zext_ln282_reg_1102(10 downto 0) <= zext_ln282_fu_325_p1(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter1_reg(10 downto 0) <= zext_ln282_reg_1102(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter53_reg <= ap_loop_exit_ready_pp0_iter52_reg;
                ap_loop_exit_ready_pp0_iter54_reg <= ap_loop_exit_ready_pp0_iter53_reg;
                ap_loop_exit_ready_pp0_iter55_reg <= ap_loop_exit_ready_pp0_iter54_reg;
                ap_loop_exit_ready_pp0_iter56_reg <= ap_loop_exit_ready_pp0_iter55_reg;
                ap_loop_exit_ready_pp0_iter57_reg <= ap_loop_exit_ready_pp0_iter56_reg;
                ap_loop_exit_ready_pp0_iter58_reg <= ap_loop_exit_ready_pp0_iter57_reg;
                ap_loop_exit_ready_pp0_iter59_reg <= ap_loop_exit_ready_pp0_iter58_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter60_reg <= ap_loop_exit_ready_pp0_iter59_reg;
                ap_loop_exit_ready_pp0_iter61_reg <= ap_loop_exit_ready_pp0_iter60_reg;
                ap_loop_exit_ready_pp0_iter62_reg <= ap_loop_exit_ready_pp0_iter61_reg;
                ap_loop_exit_ready_pp0_iter63_reg <= ap_loop_exit_ready_pp0_iter62_reg;
                ap_loop_exit_ready_pp0_iter64_reg <= ap_loop_exit_ready_pp0_iter63_reg;
                ap_loop_exit_ready_pp0_iter65_reg <= ap_loop_exit_ready_pp0_iter64_reg;
                ap_loop_exit_ready_pp0_iter66_reg <= ap_loop_exit_ready_pp0_iter65_reg;
                ap_loop_exit_ready_pp0_iter67_reg <= ap_loop_exit_ready_pp0_iter66_reg;
                ap_loop_exit_ready_pp0_iter68_reg <= ap_loop_exit_ready_pp0_iter67_reg;
                ap_loop_exit_ready_pp0_iter69_reg <= ap_loop_exit_ready_pp0_iter68_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter70_reg <= ap_loop_exit_ready_pp0_iter69_reg;
                ap_loop_exit_ready_pp0_iter71_reg <= ap_loop_exit_ready_pp0_iter70_reg;
                ap_loop_exit_ready_pp0_iter72_reg <= ap_loop_exit_ready_pp0_iter71_reg;
                ap_loop_exit_ready_pp0_iter73_reg <= ap_loop_exit_ready_pp0_iter72_reg;
                ap_loop_exit_ready_pp0_iter74_reg <= ap_loop_exit_ready_pp0_iter73_reg;
                ap_loop_exit_ready_pp0_iter75_reg <= ap_loop_exit_ready_pp0_iter74_reg;
                ap_loop_exit_ready_pp0_iter76_reg <= ap_loop_exit_ready_pp0_iter75_reg;
                ap_loop_exit_ready_pp0_iter77_reg <= ap_loop_exit_ready_pp0_iter76_reg;
                ap_loop_exit_ready_pp0_iter78_reg <= ap_loop_exit_ready_pp0_iter77_reg;
                ap_loop_exit_ready_pp0_iter79_reg <= ap_loop_exit_ready_pp0_iter78_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter80_reg <= ap_loop_exit_ready_pp0_iter79_reg;
                ap_loop_exit_ready_pp0_iter81_reg <= ap_loop_exit_ready_pp0_iter80_reg;
                ap_loop_exit_ready_pp0_iter82_reg <= ap_loop_exit_ready_pp0_iter81_reg;
                ap_loop_exit_ready_pp0_iter83_reg <= ap_loop_exit_ready_pp0_iter82_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln289_reg_1179 <= icmp_ln289_fu_504_p2;
                icmp_ln289_reg_1179_pp0_iter3_reg <= icmp_ln289_reg_1179;
                lshr_ln289_1_reg_1195 <= add_ln289_3_fu_726_p2(33 downto 1);
                ref_tmp_i_i_4_reg_1211 <= ref_tmp_i_i_4_fu_1034_p11;
                retval_0_i_i_reg_1205 <= retval_0_i_i_fu_798_p3;
                retval_0_i_i_reg_1205_pp0_iter5_reg <= retval_0_i_i_reg_1205;
                retval_0_i_i_reg_1205_pp0_iter6_reg <= retval_0_i_i_reg_1205_pp0_iter5_reg;
                retval_0_i_i_reg_1205_pp0_iter7_reg <= retval_0_i_i_reg_1205_pp0_iter6_reg;
                retval_0_i_i_reg_1205_pp0_iter8_reg <= retval_0_i_i_reg_1205_pp0_iter7_reg;
                select_ln289_reg_1184 <= select_ln289_fu_514_p3;
                tmp_8_reg_1200 <= add_ln289_3_fu_726_p2(25 downto 25);
                tmp_reg_1163_pp0_iter2_reg <= tmp_reg_1163;
                tmp_reg_1163_pp0_iter3_reg <= tmp_reg_1163_pp0_iter2_reg;
                trunc_ln289_1_reg_1190 <= trunc_ln289_1_fu_557_p1;
                    zext_ln282_reg_1102_pp0_iter10_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter9_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter11_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter10_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter12_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter11_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter13_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter12_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter14_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter13_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter15_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter14_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter16_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter15_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter17_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter16_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter18_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter17_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter19_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter18_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter20_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter19_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter21_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter20_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter22_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter21_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter23_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter22_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter24_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter23_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter25_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter24_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter26_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter25_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter27_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter26_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter28_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter27_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter29_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter28_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter2_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter1_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter30_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter29_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter31_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter30_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter32_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter31_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter33_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter32_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter34_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter33_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter35_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter34_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter36_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter35_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter37_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter36_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter38_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter37_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter39_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter38_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter3_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter2_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter40_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter39_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter41_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter40_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter42_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter41_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter43_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter42_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter44_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter43_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter45_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter44_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter46_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter45_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter47_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter46_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter48_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter47_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter49_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter48_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter4_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter3_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter50_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter49_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter51_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter50_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter52_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter51_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter53_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter52_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter54_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter53_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter55_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter54_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter56_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter55_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter57_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter56_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter58_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter57_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter59_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter58_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter5_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter4_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter60_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter59_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter61_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter60_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter62_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter61_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter63_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter62_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter64_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter63_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter65_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter64_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter66_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter65_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter67_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter66_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter68_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter67_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter69_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter68_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter6_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter5_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter70_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter69_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter71_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter70_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter72_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter71_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter73_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter72_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter74_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter73_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter75_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter74_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter76_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter75_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter77_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter76_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter78_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter77_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter79_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter78_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter7_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter6_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter80_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter79_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter81_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter80_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter82_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter81_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter83_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter82_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter8_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter7_reg(10 downto 0);
                    zext_ln282_reg_1102_pp0_iter9_reg(10 downto 0) <= zext_ln282_reg_1102_pp0_iter8_reg(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln282_reg_1102(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter1_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter2_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter3_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter4_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter5_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter6_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter7_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter8_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter9_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter10_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter11_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter12_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter13_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter14_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter15_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter16_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter17_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter18_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter19_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter20_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter21_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter22_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter23_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter24_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter25_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter26_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter27_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter28_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter29_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter30_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter31_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter32_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter33_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter34_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter35_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter36_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter37_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter38_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter39_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter40_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter41_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter42_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter43_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter44_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter45_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter46_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter47_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter48_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter49_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter50_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter51_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter52_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter53_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter54_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter55_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter56_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter57_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter58_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter59_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter60_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter61_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter62_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter63_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter64_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter65_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter66_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter67_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter68_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter69_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter70_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter71_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter72_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter73_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter74_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter75_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter76_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter77_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter78_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter79_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter80_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter81_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter82_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln282_reg_1102_pp0_iter83_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LD_fu_790_p1 <= pi_assign_fu_778_p5(32 - 1 downto 0);
    add_ln282_fu_313_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_grid_rows) + unsigned(ap_const_lv11_1));
    add_ln286_1_fu_416_p2 <= std_logic_vector(unsigned(squared_input_q0) + unsigned(squared_input_3_q1));
    add_ln286_2_fu_422_p2 <= std_logic_vector(unsigned(add_ln286_1_fu_416_p2) + unsigned(add_ln286_fu_410_p2));
    add_ln286_3_fu_428_p2 <= std_logic_vector(unsigned(squared_norm_q1) + unsigned(squared_input_q1));
    add_ln286_4_fu_434_p2 <= std_logic_vector(unsigned(squared_input_1_q1) + unsigned(squared_input_3_q0));
    add_ln286_5_fu_440_p2 <= std_logic_vector(unsigned(add_ln286_4_fu_434_p2) + unsigned(squared_input_2_q1));
    add_ln286_6_fu_446_p2 <= std_logic_vector(unsigned(add_ln286_5_fu_440_p2) + unsigned(add_ln286_3_fu_428_p2));
    add_ln286_7_fu_452_p2 <= std_logic_vector(unsigned(add_ln286_6_fu_446_p2) + unsigned(add_ln286_2_fu_422_p2));
    add_ln286_fu_410_p2 <= std_logic_vector(unsigned(squared_input_1_q0) + unsigned(squared_input_2_q0));
    add_ln289_1_fu_567_p2 <= std_logic_vector(unsigned(sub_ln289_1_fu_561_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln289_2_fu_678_p2 <= std_logic_vector(unsigned(sub_ln289_1_fu_561_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln289_3_fu_726_p2 <= std_logic_vector(unsigned(zext_ln289_3_fu_718_p1) + unsigned(zext_ln289_4_fu_722_p1));
    add_ln289_4_fu_765_p2 <= std_logic_vector(unsigned(sub_ln289_6_fu_760_p2) + unsigned(select_ln289_1_fu_753_p3));
    add_ln289_5_fu_894_p2 <= std_logic_vector(unsigned(trunc_ln289_6_fu_884_p1) + unsigned(ap_const_lv11_7F0));
    add_ln289_fu_477_p2 <= std_logic_vector(signed(sext_ln289_fu_474_p1) + signed(ap_const_lv33_10000));
    and_ln289_1_fu_1000_p2 <= (xor_ln289_fu_994_p2 and icmp_ln289_6_fu_918_p2);
    and_ln289_2_fu_1018_p2 <= (xor_ln289_1_fu_1012_p2 and icmp_ln289_5_fu_888_p2);
    and_ln289_3_fu_613_p2 <= (trunc_ln289_3_fu_609_p1 and select_ln289_reg_1184);
    and_ln289_fu_652_p2 <= (xor_ln289_2_fu_638_p2 and tmp_7_fu_644_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln282_fu_319_p2)
    begin
        if (((icmp_ln282_fu_319_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter83_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter83_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73, ap_enable_reg_pp0_iter74, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter76, ap_enable_reg_pp0_iter77, ap_enable_reg_pp0_iter78, ap_enable_reg_pp0_iter79, ap_enable_reg_pp0_iter80, ap_enable_reg_pp0_iter81, ap_enable_reg_pp0_iter82, ap_enable_reg_pp0_iter83, ap_enable_reg_pp0_iter84)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter83 = ap_const_logic_0) and (ap_enable_reg_pp0_iter82 = ap_const_logic_0) and (ap_enable_reg_pp0_iter81 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter80 = ap_const_logic_0) and (ap_enable_reg_pp0_iter79 = ap_const_logic_0) and (ap_enable_reg_pp0_iter78 = ap_const_logic_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_0) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_0) and (ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_grid_rows_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grid_rows_1_fu_152, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_grid_rows <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_grid_rows <= grid_rows_1_fu_152;
        end if; 
    end process;

    ashr_ln289_fu_938_p2 <= std_logic_vector(shift_right(signed(select_ln289_2_fu_864_p3),to_integer(unsigned('0' & zext_ln289_7_fu_934_p1(31-1 downto 0)))));
    bitcast_ln716_fu_812_p1 <= pf_fu_286_p1;
    bitcast_ln758_fu_794_p1 <= LD_fu_790_p1;
    cond49_i_i_in_fu_710_p3 <= 
        lshr_ln289_fu_688_p2 when (icmp_ln289_3_fu_672_p2(0) = '1') else 
        shl_ln289_fu_704_p2;
    grp_fu_1069_p0 <= (grp_fu_498_p2 & ap_const_lv16_0);
        grp_fu_498_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_487_p3),49));

    icmp_ln282_fu_319_p2 <= "1" when (ap_sig_allocacmp_grid_rows = ap_const_lv11_480) else "0";
    icmp_ln289_1_fu_583_p2 <= "1" when (signed(tmp_5_fu_573_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln289_2_fu_618_p2 <= "0" when (and_ln289_3_fu_613_p2 = ap_const_lv32_0) else "1";
    icmp_ln289_3_fu_672_p2 <= "1" when (signed(add_ln289_1_fu_567_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln289_4_fu_872_p2 <= "1" when (trunc_ln289_4_fu_816_p1 = ap_const_lv63_0) else "0";
    icmp_ln289_5_fu_888_p2 <= "1" when (signed(sub_ln289_4_fu_878_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln289_6_fu_918_p2 <= "1" when (sub_ln289_4_fu_878_p2 = ap_const_lv12_10) else "0";
    icmp_ln289_7_fu_928_p2 <= "1" when (unsigned(select_ln289_3_fu_906_p3) < unsigned(ap_const_lv11_36)) else "0";
    icmp_ln289_8_fu_974_p2 <= "1" when (tmp_12_fu_964_p4 = ap_const_lv6_0) else "0";
    icmp_ln289_fu_504_p2 <= "1" when (add_ln286_7_reg_1154 = ap_const_lv32_0) else "0";
    lshr_ln289_2_fu_603_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv33_1FFFFFFFF),to_integer(unsigned('0' & zext_ln289_8_fu_599_p1(31-1 downto 0)))));
    lshr_ln289_fu_688_p2 <= std_logic_vector(shift_right(unsigned(zext_ln289_fu_520_p1),to_integer(unsigned('0' & zext_ln289_1_fu_684_p1(31-1 downto 0)))));
    or_ln1_fu_366_p3 <= (ap_sig_allocacmp_grid_rows & ap_const_lv1_1);
    or_ln289_1_fu_1006_p2 <= (icmp_ln289_6_fu_918_p2 or icmp_ln289_4_fu_872_p2);
    or_ln289_fu_658_p2 <= (phi_ln289_fu_624_p2 or and_ln289_fu_652_p2);
    or_ln_fu_664_p3 <= (ap_const_lv1_0 & or_ln289_fu_658_p2);
    p_cast25_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_330_p3),64));
    phi_ln289_fu_624_p2 <= (icmp_ln289_2_fu_618_p2 and icmp_ln289_1_fu_583_p2);
    pi_assign_fu_778_p5 <= (zext_ln289_6_fu_750_p1(63 downto 32) & tmp_9_fu_771_p3 & zext_ln289_6_fu_750_p1(22 downto 0));
    ref_tmp_i_i_4_fu_1034_p10 <= ((icmp_ln289_4_fu_872_p2 & and_ln289_1_fu_1000_p2) & and_ln289_2_fu_1018_p2);
    ref_tmp_i_i_4_fu_1034_p6 <= 
        trunc_ln289_8_fu_944_p1 when (icmp_ln289_7_fu_928_p2(0) = '1') else 
        select_ln289_6_fu_948_p3;
    ref_tmp_i_i_4_fu_1034_p8 <= 
        shl_ln289_1_fu_980_p2 when (icmp_ln289_8_fu_974_p2(0) = '1') else 
        ap_const_lv32_0;
    ref_tmp_i_i_4_fu_1034_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    retval_0_i_i_fu_798_p3 <= 
        ap_const_lv32_0 when (icmp_ln289_reg_1179_pp0_iter3_reg(0) = '1') else 
        bitcast_ln758_fu_794_p1;
    scale_address0 <= zext_ln282_reg_1102_pp0_iter83_reg(11 - 1 downto 0);
    scale_ce0 <= scale_ce0_local;

    scale_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter84, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter84 = ap_const_logic_1))) then 
            scale_ce0_local <= ap_const_logic_1;
        else 
            scale_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    scale_d0 <= trunc_ln289_9_fu_1075_p1;
    scale_we0 <= scale_we0_local;

    scale_we0_local_assign_proc : process(ap_enable_reg_pp0_iter84, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter84 = ap_const_logic_1))) then 
            scale_we0_local <= ap_const_logic_1;
        else 
            scale_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln289_1_fu_753_p3 <= 
        ap_const_lv8_7F when (tmp_8_reg_1200(0) = '1') else 
        ap_const_lv8_7E;
    select_ln289_2_fu_864_p3 <= 
        sub_ln289_3_fu_858_p2 when (tmp_10_fu_820_p3(0) = '1') else 
        zext_ln289_10_fu_854_p1;
    select_ln289_3_fu_906_p3 <= 
        add_ln289_5_fu_894_p2 when (icmp_ln289_5_fu_888_p2(0) = '1') else 
        sub_ln289_5_fu_900_p2;
    select_ln289_6_fu_948_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_10_fu_820_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln289_fu_514_p3 <= 
        sub_ln289_fu_509_p2 when (tmp_reg_1163(0) = '1') else 
        add_ln286_7_reg_1154;
        sext_ln289_3_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_533_p3),64));

        sext_ln289_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln286_7_reg_1154),33));

    shl_ln289_1_fu_980_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln289_7_fu_924_p1),to_integer(unsigned('0' & zext_ln289_9_fu_914_p1(31-1 downto 0)))));
    shl_ln289_fu_704_p2 <= std_logic_vector(shift_left(unsigned(zext_ln289_fu_520_p1),to_integer(unsigned('0' & zext_ln289_2_fu_700_p1(31-1 downto 0)))));
    shl_ln_fu_487_p3 <= (add_ln286_7_reg_1154 & ap_const_lv16_0);
    squared_input_1_address0 <= zext_ln286_fu_374_p1(12 - 1 downto 0);
    squared_input_1_address1 <= p_cast25_fu_338_p1(12 - 1 downto 0);
    squared_input_1_ce0 <= squared_input_1_ce0_local;

    squared_input_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_1_ce0_local <= ap_const_logic_1;
        else 
            squared_input_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_1_ce1 <= squared_input_1_ce1_local;

    squared_input_1_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_1_ce1_local <= ap_const_logic_1;
        else 
            squared_input_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_2_address0 <= zext_ln286_fu_374_p1(12 - 1 downto 0);
    squared_input_2_address1 <= p_cast25_fu_338_p1(12 - 1 downto 0);
    squared_input_2_ce0 <= squared_input_2_ce0_local;

    squared_input_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_2_ce0_local <= ap_const_logic_1;
        else 
            squared_input_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_2_ce1 <= squared_input_2_ce1_local;

    squared_input_2_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_2_ce1_local <= ap_const_logic_1;
        else 
            squared_input_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_3_address0 <= zext_ln286_fu_374_p1(12 - 1 downto 0);
    squared_input_3_address1 <= p_cast25_fu_338_p1(12 - 1 downto 0);
    squared_input_3_ce0 <= squared_input_3_ce0_local;

    squared_input_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_3_ce0_local <= ap_const_logic_1;
        else 
            squared_input_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_3_ce1 <= squared_input_3_ce1_local;

    squared_input_3_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_3_ce1_local <= ap_const_logic_1;
        else 
            squared_input_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_address0 <= zext_ln286_fu_374_p1(12 - 1 downto 0);
    squared_input_address1 <= p_cast25_fu_338_p1(12 - 1 downto 0);
    squared_input_ce0 <= squared_input_ce0_local;

    squared_input_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_ce0_local <= ap_const_logic_1;
        else 
            squared_input_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_input_ce1 <= squared_input_ce1_local;

    squared_input_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_input_ce1_local <= ap_const_logic_1;
        else 
            squared_input_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_norm_address0 <= squared_norm_addr_reg_1107;
    squared_norm_address1 <= zext_ln282_fu_325_p1(11 - 1 downto 0);
    squared_norm_ce0 <= squared_norm_ce0_local;

    squared_norm_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_norm_ce0_local <= ap_const_logic_1;
        else 
            squared_norm_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_norm_ce1 <= squared_norm_ce1_local;

    squared_norm_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_norm_ce1_local <= ap_const_logic_1;
        else 
            squared_norm_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    squared_norm_d0 <= add_ln286_7_fu_452_p2;
    squared_norm_we0 <= squared_norm_we0_local;

    squared_norm_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            squared_norm_we0_local <= ap_const_logic_1;
        else 
            squared_norm_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln289_1_fu_561_p2 <= std_logic_vector(unsigned(ap_const_lv32_21) - unsigned(trunc_ln289_fu_553_p1));
    sub_ln289_2_fu_694_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln289_1_fu_561_p2));
    sub_ln289_3_fu_858_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln289_10_fu_854_p1));
    sub_ln289_4_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln289_5_fu_838_p1));
    sub_ln289_5_fu_900_p2 <= std_logic_vector(unsigned(ap_const_lv11_10) - unsigned(trunc_ln289_6_fu_884_p1));
    sub_ln289_6_fu_760_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) - unsigned(trunc_ln289_1_reg_1190));
    sub_ln289_7_fu_593_p2 <= std_logic_vector(signed(ap_const_lv6_3A) - signed(trunc_ln289_2_fu_589_p1));
    sub_ln289_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln286_7_reg_1154));
    tmp_10_fu_820_p3 <= bitcast_ln716_fu_812_p1(63 downto 63);
    tmp_11_fu_828_p4 <= bitcast_ln716_fu_812_p1(62 downto 52);
    tmp_12_fu_964_p4 <= select_ln289_3_fu_906_p3(10 downto 5);
    tmp_1_fu_330_p3 <= (ap_sig_allocacmp_grid_rows & ap_const_lv1_0);
    
    tmp_2_fu_523_p4_proc : process(zext_ln289_fu_520_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(33+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_2_fu_523_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(33 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_20(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := zext_ln289_fu_520_p1;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(33-1-unsigned(ap_const_lv32_20(6-1 downto 0)));
            for tmp_2_fu_523_p4_i in 0 to 33-1 loop
                v0_cpy(tmp_2_fu_523_p4_i) := zext_ln289_fu_520_p1(33-1-tmp_2_fu_523_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(33-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_523_p4 <= resvalue(33-1 downto 0);
    end process;

    tmp_3_fu_533_p3 <= (ap_const_lv1_1 & tmp_2_fu_523_p4);
    
    tmp_4_fu_545_p3_proc : process(sext_ln289_3_fu_541_p1)
    begin
        tmp_4_fu_545_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln289_3_fu_541_p1(i) = '1' then
                tmp_4_fu_545_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_5_fu_573_p4 <= add_ln289_1_fu_567_p2(31 downto 1);
    tmp_6_fu_630_p3 <= add_ln289_1_fu_567_p2(31 downto 31);
    tmp_7_fu_644_p3 <= zext_ln289_fu_520_p1(to_integer(unsigned(add_ln289_1_fu_567_p2)) downto to_integer(unsigned(add_ln289_1_fu_567_p2))) when (to_integer(unsigned(add_ln289_1_fu_567_p2)) >= 0 and to_integer(unsigned(add_ln289_1_fu_567_p2)) <=32) else "-";
    tmp_9_fu_771_p3 <= (tmp_reg_1163_pp0_iter3_reg & add_ln289_4_fu_765_p2);
    trunc_ln289_1_fu_557_p1 <= tmp_4_fu_545_p3(8 - 1 downto 0);
    trunc_ln289_2_fu_589_p1 <= sub_ln289_1_fu_561_p2(6 - 1 downto 0);
    trunc_ln289_3_fu_609_p1 <= lshr_ln289_2_fu_603_p2(32 - 1 downto 0);
    trunc_ln289_4_fu_816_p1 <= bitcast_ln716_fu_812_p1(63 - 1 downto 0);
    trunc_ln289_5_fu_842_p1 <= bitcast_ln716_fu_812_p1(52 - 1 downto 0);
    trunc_ln289_6_fu_884_p1 <= sub_ln289_4_fu_878_p2(11 - 1 downto 0);
    trunc_ln289_7_fu_924_p1 <= select_ln289_2_fu_864_p3(32 - 1 downto 0);
    trunc_ln289_8_fu_944_p1 <= ashr_ln289_fu_938_p2(32 - 1 downto 0);
    trunc_ln289_9_fu_1075_p1 <= grp_fu_1069_p2(32 - 1 downto 0);
    trunc_ln289_fu_553_p1 <= tmp_4_fu_545_p3(32 - 1 downto 0);
    xor_ln289_1_fu_1012_p2 <= (or_ln289_1_fu_1006_p2 xor ap_const_lv1_1);
    xor_ln289_2_fu_638_p2 <= (tmp_6_fu_630_p3 xor ap_const_lv1_1);
    xor_ln289_fu_994_p2 <= (icmp_ln289_4_fu_872_p2 xor ap_const_lv1_1);
    zext_ln282_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_grid_rows),64));
    zext_ln286_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_366_p3),64));
    zext_ln289_10_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln289_8_cast_fu_846_p3),54));
    zext_ln289_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln289_2_fu_678_p2),33));
    zext_ln289_2_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln289_2_fu_694_p2),33));
    zext_ln289_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cond49_i_i_in_fu_710_p3),34));
    zext_ln289_4_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_664_p3),34));
    zext_ln289_5_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_828_p4),12));
    zext_ln289_6_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln289_1_reg_1195),64));
    zext_ln289_7_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln289_3_fu_906_p3),54));
    zext_ln289_8_cast_fu_846_p3 <= (ap_const_lv1_1 & trunc_ln289_5_fu_842_p1);
    zext_ln289_8_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln289_7_fu_593_p2),33));
    zext_ln289_9_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln289_3_fu_906_p3),32));
    zext_ln289_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln289_reg_1184),33));
end behav;
