// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module process_features_squash_Pipeline_VITIS_LOOP_272_1_VITIS_LOOP_274_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        squared_input_3_address0,
        squared_input_3_ce0,
        squared_input_3_we0,
        squared_input_3_d0,
        squared_input_2_address0,
        squared_input_2_ce0,
        squared_input_2_we0,
        squared_input_2_d0,
        squared_input_1_address0,
        squared_input_1_ce0,
        squared_input_1_we0,
        squared_input_1_d0,
        squared_input_address0,
        squared_input_ce0,
        squared_input_we0,
        squared_input_d0,
        input_buffer_address0,
        input_buffer_ce0,
        input_buffer_q0,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_q0,
        input_buffer_2_address0,
        input_buffer_2_ce0,
        input_buffer_2_q0,
        input_buffer_3_address0,
        input_buffer_3_ce0,
        input_buffer_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] squared_input_3_address0;
output   squared_input_3_ce0;
output   squared_input_3_we0;
output  [31:0] squared_input_3_d0;
output  [11:0] squared_input_2_address0;
output   squared_input_2_ce0;
output   squared_input_2_we0;
output  [31:0] squared_input_2_d0;
output  [11:0] squared_input_1_address0;
output   squared_input_1_ce0;
output   squared_input_1_we0;
output  [31:0] squared_input_1_d0;
output  [11:0] squared_input_address0;
output   squared_input_ce0;
output   squared_input_we0;
output  [31:0] squared_input_d0;
output  [11:0] input_buffer_address0;
output   input_buffer_ce0;
input  [31:0] input_buffer_q0;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
input  [31:0] input_buffer_1_q0;
output  [11:0] input_buffer_2_address0;
output   input_buffer_2_ce0;
input  [31:0] input_buffer_2_q0;
output  [11:0] input_buffer_3_address0;
output   input_buffer_3_ce0;
input  [31:0] input_buffer_3_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln272_fu_243_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln274_fu_289_p1;
reg   [1:0] trunc_ln274_reg_471;
reg   [1:0] trunc_ln274_reg_471_pp0_iter1_reg;
reg   [1:0] trunc_ln274_reg_471_pp0_iter2_reg;
reg   [11:0] squared_input_addr_reg_496;
reg   [11:0] squared_input_addr_reg_496_pp0_iter1_reg;
reg   [11:0] squared_input_addr_reg_496_pp0_iter2_reg;
reg   [11:0] squared_input_1_addr_reg_502;
reg   [11:0] squared_input_1_addr_reg_502_pp0_iter1_reg;
reg   [11:0] squared_input_1_addr_reg_502_pp0_iter2_reg;
reg   [11:0] squared_input_2_addr_reg_508;
reg   [11:0] squared_input_2_addr_reg_508_pp0_iter1_reg;
reg   [11:0] squared_input_2_addr_reg_508_pp0_iter2_reg;
reg   [11:0] squared_input_3_addr_reg_514;
reg   [11:0] squared_input_3_addr_reg_514_pp0_iter1_reg;
reg   [11:0] squared_input_3_addr_reg_514_pp0_iter2_reg;
wire   [31:0] tmp_fu_379_p11;
reg   [31:0] tmp_reg_520;
reg   [31:0] trunc_ln_reg_525;
wire   [63:0] zext_ln276_fu_309_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] grid_cols_fu_76;
wire   [3:0] add_ln274_fu_337_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_grid_cols_load;
reg   [10:0] grid_rows_fu_80;
wire   [10:0] select_ln272_1_fu_281_p3;
reg   [10:0] ap_sig_allocacmp_grid_rows_load;
reg   [13:0] indvar_flatten_fu_84;
wire   [13:0] add_ln272_fu_237_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
reg    input_buffer_ce0_local;
reg    input_buffer_1_ce0_local;
reg    input_buffer_2_ce0_local;
reg    input_buffer_3_ce0_local;
reg    squared_input_2_we0_local;
reg    squared_input_2_ce0_local;
reg    squared_input_1_we0_local;
reg    squared_input_1_ce0_local;
reg    squared_input_we0_local;
reg    squared_input_ce0_local;
reg    squared_input_3_we0_local;
reg    squared_input_3_ce0_local;
wire  signed [31:0] mul_ln276_fu_188_p0;
wire  signed [47:0] sext_ln276_fu_402_p1;
wire  signed [31:0] mul_ln276_fu_188_p1;
wire   [0:0] icmp_ln274_fu_261_p2;
wire   [10:0] add_ln272_1_fu_275_p2;
wire   [3:0] select_ln272_fu_267_p3;
wire   [0:0] tmp_13_fu_293_p3;
wire   [11:0] add_ln_fu_301_p3;
wire   [31:0] tmp_fu_379_p9;
wire   [47:0] mul_ln276_fu_188_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_fu_379_p1;
wire   [1:0] tmp_fu_379_p3;
wire  signed [1:0] tmp_fu_379_p5;
wire  signed [1:0] tmp_fu_379_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 grid_cols_fu_76 = 4'd0;
#0 grid_rows_fu_80 = 11'd0;
#0 indvar_flatten_fu_84 = 14'd0;
#0 ap_done_reg = 1'b0;
end

process_features_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U641(
    .din0(mul_ln276_fu_188_p0),
    .din1(mul_ln276_fu_188_p1),
    .dout(mul_ln276_fu_188_p2)
);

(* dissolve_hierarchy = "yes" *) process_features_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U642(
    .din0(input_buffer_q0),
    .din1(input_buffer_1_q0),
    .din2(input_buffer_2_q0),
    .din3(input_buffer_3_q0),
    .def(tmp_fu_379_p9),
    .sel(trunc_ln274_reg_471),
    .dout(tmp_fu_379_p11)
);

process_features_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln272_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grid_cols_fu_76 <= add_ln274_fu_337_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            grid_cols_fu_76 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln272_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grid_rows_fu_80 <= select_ln272_1_fu_281_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            grid_rows_fu_80 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln272_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_84 <= add_ln272_fu_237_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        squared_input_1_addr_reg_502 <= zext_ln276_fu_309_p1;
        squared_input_1_addr_reg_502_pp0_iter1_reg <= squared_input_1_addr_reg_502;
        squared_input_2_addr_reg_508 <= zext_ln276_fu_309_p1;
        squared_input_2_addr_reg_508_pp0_iter1_reg <= squared_input_2_addr_reg_508;
        squared_input_3_addr_reg_514 <= zext_ln276_fu_309_p1;
        squared_input_3_addr_reg_514_pp0_iter1_reg <= squared_input_3_addr_reg_514;
        squared_input_addr_reg_496 <= zext_ln276_fu_309_p1;
        squared_input_addr_reg_496_pp0_iter1_reg <= squared_input_addr_reg_496;
        tmp_reg_520 <= tmp_fu_379_p11;
        trunc_ln274_reg_471 <= trunc_ln274_fu_289_p1;
        trunc_ln274_reg_471_pp0_iter1_reg <= trunc_ln274_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        squared_input_1_addr_reg_502_pp0_iter2_reg <= squared_input_1_addr_reg_502_pp0_iter1_reg;
        squared_input_2_addr_reg_508_pp0_iter2_reg <= squared_input_2_addr_reg_508_pp0_iter1_reg;
        squared_input_3_addr_reg_514_pp0_iter2_reg <= squared_input_3_addr_reg_514_pp0_iter1_reg;
        squared_input_addr_reg_496_pp0_iter2_reg <= squared_input_addr_reg_496_pp0_iter1_reg;
        trunc_ln274_reg_471_pp0_iter2_reg <= trunc_ln274_reg_471_pp0_iter1_reg;
        trunc_ln_reg_525 <= {{mul_ln276_fu_188_p2[47:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln272_fu_243_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_grid_cols_load = 4'd0;
    end else begin
        ap_sig_allocacmp_grid_cols_load = grid_cols_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_grid_rows_load = 11'd0;
    end else begin
        ap_sig_allocacmp_grid_rows_load = grid_rows_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_ce0_local = 1'b1;
    end else begin
        input_buffer_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_2_ce0_local = 1'b1;
    end else begin
        input_buffer_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_3_ce0_local = 1'b1;
    end else begin
        input_buffer_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_ce0_local = 1'b1;
    end else begin
        input_buffer_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        squared_input_1_ce0_local = 1'b1;
    end else begin
        squared_input_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln274_reg_471_pp0_iter2_reg == 2'd1))) begin
        squared_input_1_we0_local = 1'b1;
    end else begin
        squared_input_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        squared_input_2_ce0_local = 1'b1;
    end else begin
        squared_input_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln274_reg_471_pp0_iter2_reg == 2'd2))) begin
        squared_input_2_we0_local = 1'b1;
    end else begin
        squared_input_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        squared_input_3_ce0_local = 1'b1;
    end else begin
        squared_input_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln274_reg_471_pp0_iter2_reg == 2'd3))) begin
        squared_input_3_we0_local = 1'b1;
    end else begin
        squared_input_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        squared_input_ce0_local = 1'b1;
    end else begin
        squared_input_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln274_reg_471_pp0_iter2_reg == 2'd0))) begin
        squared_input_we0_local = 1'b1;
    end else begin
        squared_input_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln272_1_fu_275_p2 = (ap_sig_allocacmp_grid_rows_load + 11'd1);

assign add_ln272_fu_237_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln274_fu_337_p2 = (select_ln272_fu_267_p3 + 4'd1);

assign add_ln_fu_301_p3 = {{select_ln272_1_fu_281_p3}, {tmp_13_fu_293_p3}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln272_fu_243_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln274_fu_261_p2 = ((ap_sig_allocacmp_grid_cols_load == 4'd8) ? 1'b1 : 1'b0);

assign input_buffer_1_address0 = zext_ln276_fu_309_p1;

assign input_buffer_1_ce0 = input_buffer_1_ce0_local;

assign input_buffer_2_address0 = zext_ln276_fu_309_p1;

assign input_buffer_2_ce0 = input_buffer_2_ce0_local;

assign input_buffer_3_address0 = zext_ln276_fu_309_p1;

assign input_buffer_3_ce0 = input_buffer_3_ce0_local;

assign input_buffer_address0 = zext_ln276_fu_309_p1;

assign input_buffer_ce0 = input_buffer_ce0_local;

assign mul_ln276_fu_188_p0 = sext_ln276_fu_402_p1;

assign mul_ln276_fu_188_p1 = sext_ln276_fu_402_p1;

assign select_ln272_1_fu_281_p3 = ((icmp_ln274_fu_261_p2[0:0] == 1'b1) ? add_ln272_1_fu_275_p2 : ap_sig_allocacmp_grid_rows_load);

assign select_ln272_fu_267_p3 = ((icmp_ln274_fu_261_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_grid_cols_load);

assign sext_ln276_fu_402_p1 = $signed(tmp_reg_520);

assign squared_input_1_address0 = squared_input_1_addr_reg_502_pp0_iter2_reg;

assign squared_input_1_ce0 = squared_input_1_ce0_local;

assign squared_input_1_d0 = trunc_ln_reg_525;

assign squared_input_1_we0 = squared_input_1_we0_local;

assign squared_input_2_address0 = squared_input_2_addr_reg_508_pp0_iter2_reg;

assign squared_input_2_ce0 = squared_input_2_ce0_local;

assign squared_input_2_d0 = trunc_ln_reg_525;

assign squared_input_2_we0 = squared_input_2_we0_local;

assign squared_input_3_address0 = squared_input_3_addr_reg_514_pp0_iter2_reg;

assign squared_input_3_ce0 = squared_input_3_ce0_local;

assign squared_input_3_d0 = trunc_ln_reg_525;

assign squared_input_3_we0 = squared_input_3_we0_local;

assign squared_input_address0 = squared_input_addr_reg_496_pp0_iter2_reg;

assign squared_input_ce0 = squared_input_ce0_local;

assign squared_input_d0 = trunc_ln_reg_525;

assign squared_input_we0 = squared_input_we0_local;

assign tmp_13_fu_293_p3 = select_ln272_fu_267_p3[32'd2];

assign tmp_fu_379_p9 = 'bx;

assign trunc_ln274_fu_289_p1 = select_ln272_fu_267_p3[1:0];

assign zext_ln276_fu_309_p1 = add_ln_fu_301_p3;

endmodule //process_features_squash_Pipeline_VITIS_LOOP_272_1_VITIS_LOOP_274_2
